extension Integer (Prime)
  def self.from_prime_division: (Array[[ String ]]) -> Integer

  def prime_division: (?Prime::PseudoPrimeGenerator) -> Array[[ Integer, Integer ]]

  def prime?: () -> bool

  def self.each_prime: (Integer) { (Integer) -> void } -> void
end

class Prime
  def self?.each: (?Integer ubound, ?Prime::PseudoPrimeGenerator generator) { (Integer) -> void } -> void

  def self?.int_from_prime_division: (Array[[ Integer, Integer ]]) -> Integer

  def self?.prime?: (Integer value, ?Prime::PseudoPrimeGenerator generator) -> bool

  def self?.prime_division: (Integer, ?Prime::PseudoPrimeGenerator generator) -> Array[[ Integer, Integer ]]
end

class Prime::PseudoPrimeGenerator
  include Enumerable

  def initialize: (?Integer?) -> void

  def each: () { (Integer) -> void } -> void

  def next: () -> Integer

  def rewind: () -> void

  def size: () -> Float

  def succ: () -> Integer

  def upper_bound: () -> Integer?

  def upper_bound=: (Integer?) -> void
end

class EratosthenesGenerator < PseudoPrimeGenerator
end

class TrialDivisionGenerator < PseudoPrimeGenerator
end

class Generator23 < PseudoPrimeGenerator
end
