# [Object](Object) is the default root of all Ruby
# objects. [Object](Object) inherits from
# [BasicObject](https://ruby-doc.org/core-2.6.3/BasicObject.html) which
# allows creating alternate object hierarchies. Methods on
# [Object](Object) are available to all classes unless
# explicitly overridden.
# 
# [Object](Object) mixes in the
# [Kernel](https://ruby-doc.org/core-2.6.3/Kernel.html) module, making the
# built-in kernel functions globally accessible. Although the instance
# methods of [Object](Object) are defined by the
# [Kernel](https://ruby-doc.org/core-2.6.3/Kernel.html) module, we have
# chosen to document them here for clarity.
# 
# When referencing constants in classes inheriting from
# [Object](Object) you do not need to use the full
# namespace. For example, referencing `File` inside `YourClass` will find
# the top-level [File](https://ruby-doc.org/core-2.6.3/File.html) class.
# 
# In the descriptions of Object's methods, the parameter *symbol* refers
# to a symbol, which is either a quoted string or a
# [Symbol](https://ruby-doc.org/core-2.6.3/Symbol.html) (such as `:name`
# ).
class Object < BasicObject
  include Kernel

  def !~: (untyped) -> bool

  def <=>: (untyped) -> Integer?

  def ===: (untyped) -> bool

  def =~: (untyped) -> bool

  def class: -> untyped

  def clone: (?freeze: bool) -> self

  def define_singleton_method: (Symbol, Method | UnboundMethod) -> Symbol
                             | (Symbol) { (*untyped) -> untyped } -> Symbol

  def display: (?_Writeable port) -> void

  def dup: -> self

  def enum_for: (Symbol method, *untyped args) ?{ (*untyped args) -> Integer } -> Enumerator[untyped, untyped]
              | (*untyped args) ?{ (*untyped args) -> Integer } -> Enumerator[untyped, untyped]

  alias to_enum enum_for

  def eql?: (untyped) -> bool

  def `extend`: (*Module) -> self

  def freeze: () -> self

  def frozen: () -> bool

  def hash: () -> Integer

  def inspect: () -> String

  def instance_of?: (Module) -> bool

  def instance_variable_defined?: (String | Symbol var) -> bool

  def instance_variable_get: (String | Symbol var) -> untyped

  def instance_variable_set: [X] (String | Symbol var, X value) -> X

  def instance_variables: () -> Array[Symbol]

  def is_a?: (Module) -> bool

  alias kind_of? is_a?

  def itself: () -> self

  def method: (String | Symbol name) -> Method

  def methods: () -> Array[Symbol]

  def nil?: () -> bool

  def object_id: () -> Integer

  def private_methods: () -> Array[Symbol]

  def protected_methods: () -> Array[Symbol]

  def public_method: (name name) -> Method

  def public_send: (name name, *untyped args) ?{ (*untyped) -> untyped } -> untyped

  def remove_instance_variable: (name name) -> untyped

  def respond_to?: (name name, ?bool include_all) -> bool

  def send: (name name, *untyped args) ?{ (*untyped) -> untyped } -> untyped

  def singleton_class: () -> Class

  def singleton_method: (name name) -> Method

  def singleton_methods: () -> Array[Symbol]

  def taint: () -> self

  alias untrust taint

  def tainted?: () -> bool

  alias untrusted? tainted?

  def tap: () { (self) -> void } -> self

  def yield_self: [X] () { (self) -> X } -> X

  def to_s: () -> String

  def untaint: () -> self

  alias trust untaint

  alias then yield_self
end

interface _Writeable
  def write: (untyped) -> void
end

type Object::name = Symbol | String
