# Raised when the arguments are wrong and there isn't a more specific
# [Exception](https://ruby-doc.org/core-2.6.3/Exception.html) class.
# 
# Ex: passing the wrong number of arguments
# 
# ```ruby
# [1, 2, 3].first(4, 5)
# ```
# 
# *raises the exception:*
# 
#     ArgumentError: wrong number of arguments (given 2, expected 1)
# 
# Ex: passing an argument that is not acceptable:
# 
# ```ruby
# [1, 2, 3].first(-4)
# ```
# 
# *raises the exception:*
# 
#     ArgumentError: negative array size
class ArgumentError < StandardError
end

# The exception class which will be raised when pushing into a closed
# [Queue](https://ruby-doc.org/core-2.6.3/Queue.html). See
# [Queue\#close](https://ruby-doc.org/core-2.6.3/Queue.html#method-i-close)
# and
# [SizedQueue\#close](https://ruby-doc.org/core-2.6.3/SizedQueue.html#method-i-close)
# .
class ClosedQueueError < StopIteration
end

# [EncodingError](EncodingError) is the base class for
# encoding errors.
class EncodingError < StandardError
end

# Raised by some [IO](https://ruby-doc.org/core-2.6.3/IO.html) operations
# when reaching the end of file. Many
# [IO](https://ruby-doc.org/core-2.6.3/IO.html) methods exist in two
# forms,
# 
# one that returns `nil` when the end of file is reached, the other raises
# `EOFError` .
# 
# `EOFError` is a subclass of `IOError` .
# 
# ```ruby
# file = File.open("/etc/hosts")
# file.read
# file.gets     #=> nil
# file.readline #=> EOFError: end of file reached
# ```
class EOFError < IOError
end

# Raised when attempting to convert special float values (in particular
# `Infinity` or `NaN` ) to numerical classes which don't support them.
# 
# ```ruby
# Float::INFINITY.to_r   #=> FloatDomainError: Infinity
# ```
class FloatDomainError < RangeError
end

# Raised when the given index is invalid.
# 
# ```ruby
# a = [:foo, :bar]
# a.fetch(0)   #=> :foo
# a[4]         #=> nil
# a.fetch(4)   #=> IndexError: index 4 outside of array bounds: -2...2
# ```
class IndexError < StandardError
end

# Raised when the interrupt signal is received, typically because the user
# has pressed Control-C (on most posix platforms). As such, it is a
# subclass of `SignalException` .
# 
# ```ruby
# begin
#   puts "Press ctrl-C when you get bored"
#   loop {}
# rescue Interrupt => e
#   puts "Note: You will typically use Signal.trap instead."
# end
# ```
# 
# *produces:*
# 
#     Press ctrl-C when you get bored
# 
# *then waits until it is interrupted with Control-C and then prints:*
# 
#     Note: You will typically use Signal.trap instead.
class Interrupt < SignalException
  def initialize: (?String) -> void
end

# Raised when an [IO](https://ruby-doc.org/core-2.6.3/IO.html) operation
# fails.
# 
# ```ruby
# File.open("/etc/hosts") {|f| f << "example"}
#   #=> IOError: not opened for writing
# 
# File.open("/etc/hosts") {|f| f.close; f.read }
#   #=> IOError: closed stream
# ```
# 
# Note that some [IO](https://ruby-doc.org/core-2.6.3/IO.html) failures
# raise `SystemCallError` s and these are not subclasses of IOError:
# 
# ```ruby
# File.open("does/not/exist")
#   #=> Errno::ENOENT: No such file or directory - does/not/exist
# ```
class IOError < StandardError
end

# Raised when the specified key is not found. It is a subclass of
# [IndexError](https://ruby-doc.org/core-2.6.3/IndexError.html).
# 
# ```ruby
# h = {"foo" => :bar}
# h.fetch("foo") #=> :bar
# h.fetch("baz") #=> KeyError: key not found: "baz"
# ```
class KeyError[K, R] < IndexError
  def initialize: (?String msg, ?key: K, ?receiver: R) -> void
  def key: () -> K?
  def receiver: () -> R?
end

# Raised when a file required (a Ruby script, extension library, ...)
# fails to load.
# 
# ```ruby
# require 'this/file/does/not/exist'
# ```
# 
# *raises the exception:*
# 
#     LoadError: no such file to load -- this/file/does/not/exist
class LoadError < ScriptError
  def path: () -> (String | nil)
end

# Raised when Ruby can't yield as requested.
# 
# A typical scenario is attempting to yield when no block is given:
# 
# ```ruby
# def call_block
#   yield 42
# end
# call_block
# ```
# 
# *raises the exception:*
# 
#     LocalJumpError: no block given (yield)
# 
# A more subtle example:
# 
# ```ruby
# def get_me_a_return
#   Proc.new { return 42 }
# end
# get_me_a_return.call
# ```
# 
# *raises the exception:*
# 
#     LocalJumpError: unexpected return
class LocalJumpError < StandardError
  def exit_value: () -> untyped

  def reason: () -> untyped
end

# Raised when a given name is invalid or undefined.
# 
# ```ruby
# puts foo
# ```
# 
# *raises the exception:*
# 
#     NameError: undefined local variable or method `foo' for main:Object
# 
# Since constant names must start with a capital:
# 
# ```ruby
# Integer.const_set :answer, 42
# ```
# 
# *raises the exception:*
# 
#     NameError: wrong constant name answer
class NameError[T] < StandardError
  def initialize: (?String msg, ?receiver: T) -> void

  public

  def local_variables: () -> ::Array[Symbol]

  def name: () -> untyped

  def receiver: () -> T?
end

# Raised when memory allocation fails.
class NoMemoryError < Exception
end

# Raised when a method is called on a receiver which doesn't have it
# defined and also fails to respond with `method_missing` .
# 
# ```ruby
# "hello".to_ary
# ```
# 
# *raises the exception:*
# 
#     NoMethodError: undefined method `to_ary' for "hello":String
class NoMethodError[T] < NameError[T]
  def initialize: (?String msg, ?receiver: T) -> void

  public

  def args: () -> untyped

  def private_call?: () -> untyped
end

# Raised when a feature is not implemented on the current platform. For
# example, methods depending on the `fsync` or `fork` system calls may
# raise this exception if the underlying operating system or Ruby runtime
# does not support them.
# 
# Note that if `fork` raises a `NotImplementedError`, then
# `respond_to?(:fork)` returns `false` .
class NotImplementedError < ScriptError
end

# Raised when a given numerical value is out of range.
# 
# ```ruby
# [1, 2, 3].drop(1 << 100)
# ```
# 
# *raises the exception:*
# 
#     RangeError: bignum too big to convert into `long'
class RangeError < StandardError
end

# Raised when given an invalid regexp expression.
# 
# ```ruby
# Regexp.new("?")
# ```
# 
# *raises the exception:*
# 
#     RegexpError: target of repeat operator is not specified: /?/
class RegexpError < StandardError
end

# A generic error class raised when an invalid operation is attempted.
# [Kernel\#raise](https://ruby-doc.org/core-2.6.3/Kernel.html#method-i-raise)
# will raise a [RuntimeError](RuntimeError) if no
# [Exception](https://ruby-doc.org/core-2.6.3/Exception.html) class is
# specified.
# 
# ```ruby
# raise "ouch"
# ```
# 
# *raises the exception:*
# 
#     RuntimeError: ouch
class RuntimeError < StandardError
end

# [ScriptError](ScriptError) is the superclass for
# errors raised when a script can not be executed because of a `LoadError`
# , `NotImplementedError` or a `SyntaxError` . Note these type of
# `ScriptErrors` are not `StandardError` and will not be rescued unless it
# is specified explicitly (or its ancestor `Exception` ).
class ScriptError < Exception
end

# Raised when attempting a potential unsafe operation, typically when the
# $SAFE level is raised above 0.
# 
# ```ruby
# foo = "bar"
# proc = Proc.new do
#   $SAFE = 3
#   foo.untaint
# end
# proc.call
# ```
# 
# *raises the exception:*
# 
#     SecurityError: Insecure: Insecure operation `untaint' at level 3
class SecurityError < Exception
end

# Raised when a signal is received.
# 
# ```ruby
# begin
#   Process.kill('HUP',Process.pid)
#   sleep # wait for receiver to handle signal sent by Process.kill
# rescue SignalException => e
#   puts "received Exception #{e}"
# end
# ```
# 
# *produces:*
# 
# ```ruby
# received Exception SIGHUP
# ```
class SignalException < Exception
  def initialize: (?String arg0) -> void

  public

  alias signm message

  def signo: () -> Integer
end

# The most standard error types are subclasses of
# [StandardError](StandardError). A rescue clause
# without an explicit
# [Exception](https://ruby-doc.org/core-2.6.3/Exception.html) class will
# rescue all StandardErrors (and only those).
# 
# ```ruby
# def foo
#   raise "Oups"
# end
# foo rescue "Hello"   #=> "Hello"
# ```
# 
# On the other hand:
# 
# ```ruby
# require 'does/not/exist' rescue "Hi"
# ```
# 
# *raises the exception:*
# 
#     LoadError: no such file to load -- does/not/exist
class StandardError < Exception
end

# Raised to stop the iteration, in particular by
# [Enumerator\#next](https://ruby-doc.org/core-2.6.3/Enumerator.html#method-i-next)
# . It is rescued by
# [Kernel\#loop](https://ruby-doc.org/core-2.6.3/Kernel.html#method-i-loop)
# .
# 
# ```ruby
# loop do
#   puts "Hello"
#   raise StopIteration
#   puts "World"
# end
# puts "Done!"
# ```
# 
# *produces:*
# 
# ```ruby
# Hello
# Done!
# ```
class StopIteration < IndexError
  def result: () -> untyped
end

# Raised when encountering Ruby code with an invalid syntax.
# 
# ```ruby
# eval("1+1=2")
# ```
# 
# *raises the exception:*
# 
#     SyntaxError: (eval):1: syntax error, unexpected '=', expecting $end
class SyntaxError < ScriptError
  def initialize: (?String arg0) -> void
end

# [SystemCallError](SystemCallError) is the base class
# for all low-level platform-dependent errors.
# 
# The errors available on the current platform are subclasses of
# [SystemCallError](SystemCallError) and are defined
# in the [Errno](https://ruby-doc.org/core-2.6.3/Errno.html) module.
# 
# ```ruby
# File.open("does/not/exist")
# ```
# 
# *raises the exception:*
# 
#     Errno::ENOENT: No such file or directory - does/not/exist
class SystemCallError < StandardError
  def initialize: (String msg, ?Integer errno, ?String location) -> SystemCallError

  def self.===: (untyped other) -> bool

  public

  def errno: () -> Integer?
end

# Raised by `exit` to initiate the termination of the script.
class SystemExit < Exception
  def initialize: (?String arg0) -> void

  public

  def status: () -> Integer

  def success?: () -> bool
end


# Raised in case of a stack overflow.
# 
# ```ruby
# def me_myself_and_i
#   me_myself_and_i
# end
# me_myself_and_i
# ```
# 
# *raises the exception:*
# 
#     SystemStackError: stack level too deep
class SystemStackError < Exception
end

# Raised when an invalid operation is attempted on a thread.
# 
# For example, when no other thread has been started:
# 
# ```ruby
# Thread.stop
# ```
# 
# This will raises the following exception:
# 
#     ThreadError: stopping only thread
#     note: use sleep to stop forever
class ThreadError < StandardError
end

# Raised when encountering an object that is not of the expected type.
# 
# ```ruby
# [1, 2, 3].first("two")
# ```
# 
# *raises the exception:*
# 
#     TypeError: no implicit conversion of String into Integer
class TypeError < StandardError
end

# Raised when `throw` is called with a *tag* which does not have
# corresponding `catch` block.
# 
# ```ruby
# throw "foo", "bar"
# ```
# 
# *raises the exception:*
# 
#     UncaughtThrowError: uncaught throw "foo"
class UncaughtThrowError < ArgumentError
  def initialize: (?String arg0) -> void

  public

  def tag: () -> untyped

  # Returns exception’s message (or the name of the exception if no message
  # is set).
  def to_s: () -> String

  def value: () -> untyped
end

# Raised when attempting to divide an integer by 0.
# 
# ```ruby
# 42 / 0   #=> ZeroDivisionError: divided by 0
# ```
# 
# Note that only division by an exact 0 will raise the exception:
# 
# ```ruby
# 42 /  0.0   #=> Float::INFINITY
# 42 / -0.0   #=> -Float::INFINITY
# 0  /  0.0   #=> NaN
# ```
class ZeroDivisionError < StandardError
end

class FrozenError[T] < RuntimeError
  def initialize: (?String msg, ?receiver: T) -> void
  
  def receiver: () -> T?
end
