# Objects of class `Binding` encapsulate the execution context at some
# particular place in the code and retain this context for future use. The
# variables, methods, value of `self`, and possibly an iterator block
# that can be accessed in this context are all retained.
# [Binding](Binding) objects can be created using
# `Kernel#binding`, and are made available to the callback of
# `Kernel#set_trace_func`.
# 
# These binding objects can be passed as the second argument of the
# `Kernel#eval` method, establishing an environment for the evaluation.
# 
# ```ruby
# class Demo
#   def initialize(n)
#     @secret = n
#   end
#   def get_binding
#     binding
#   end
# end
# 
# k1 = Demo.new(99)
# b1 = k1.get_binding
# k2 = Demo.new(-3)
# b2 = k2.get_binding
# 
# eval("@secret", b1)   #=> 99
# eval("@secret", b2)   #=> -3
# eval("@secret")       #=> nil
# ```
# 
# [Binding](Binding) objects have no class-specific
# methods.
class Binding < Object
  # Returns `true` if a local variable `symbol` exists.
  # 
  # ```ruby
  # def foo
  #   a = 1
  #   binding.local_variable_defined?(:a) #=> true
  #   binding.local_variable_defined?(:b) #=> false
  # end
  # ```
  # 
  # This method is the short version of the following code:
  # 
  # ```ruby
  # binding.eval("defined?(#{symbol}) == 'local-variable'")
  # ```
  def local_variable_defined?: (String | Symbol symbol) -> bool

  # Returns the value of the local variable `symbol`.
  # 
  # ```ruby
  # def foo
  #   a = 1
  #   binding.local_variable_get(:a) #=> 1
  #   binding.local_variable_get(:b) #=> NameError
  # end
  # ```
  # 
  # This method is the short version of the following code:
  # 
  # ```ruby
  # binding.eval("#{symbol}")
  # ```
  def local_variable_get: (String | Symbol symbol) -> untyped

  # Set local variable named `symbol` as `obj`.
  # 
  # ```ruby
  # def foo
  #   a = 1
  #   bind = binding
  #   bind.local_variable_set(:a, 2) # set existing local variable `a'
  #   bind.local_variable_set(:b, 3) # create new local variable `b'
  #                                  # `b' exists only in binding
  # 
  #   p bind.local_variable_get(:a)  #=> 2
  #   p bind.local_variable_get(:b)  #=> 3
  #   p a                            #=> 2
  #   p b                            #=> NameError
  # end
  # ```
  # 
  # This method behaves similarly to the following code:
  # 
  # ```ruby
  # binding.eval("#{symbol} = #{obj}")
  # ```
  # 
  # if `obj` can be dumped in Ruby code.
  def local_variable_set: [U] (String | Symbol symbol, U obj) -> U

  # Returns the bound receiver of the binding object.
  def receiver: () -> Object

  # Returns the Ruby source filename and line number of the binding object.
  def source_location: () -> [ String, Integer ]

  def eval: (String arg0, ?String filename, ?Integer lineno) -> untyped

  def irb: () -> void

  def local_variables: () -> ::Array[Symbol]
end
