#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.2
# from Racc grammar file "".
#

require 'racc/parser.rb'
module RBS
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 1444)

Types = RBS::Types
Namespace = RBS::Namespace
TypeName = RBS::TypeName
Declarations = RBS::AST::Declarations
Members = RBS::AST::Members
MethodType = RBS::MethodType
Annotation = RBS::AST::Annotation

class LocatedValue
  attr_reader :value

  def initialize(location: nil, range: nil, buffer: nil, value:)
    @location = location || buffer
    @value = value
    @range = range
  end

  def location
    if @location.is_a?(RBS::Buffer)
      @location = Location.new(buffer: @location, range: @range)
    end
    @location
  end

  def update_value(value)
    @value = value
    nil
  end

  def with_value(value)
    LocatedValue.new(value: value, location: @location, range: @range)
  end

  def range
    if @range
      @range
    else
      @location&.range
    end
  end
end

attr_reader :input
attr_reader :buffer
attr_reader :eof_re
attr_reader :tokenizer

def value(token)
  tokenizer.value(token)
end

def location(range: nil, token: nil, start_token: nil, end_token: nil, start_pos: nil, end_pos: nil, optional: false)
  if optional
    unless range || token || ((start_token || start_pos) && (end_token || end_pos))
      return
    end
  end

  if token
    range = tokenizer.range(token)
  else
    start_pos = tokenizer.start_pos(start_token) if start_token
    end_pos = tokenizer.end_pos(end_token) if end_token
    range = start_pos...end_pos if start_pos && end_pos
  end

  Location.new(buffer: buffer, range: range)
end

def initialize(type, buffer:, eof_re:)
  super()
  @type = type
  @buffer = buffer
  @tokenizer = Lex.new(buffer.content)
  @eof_re = eof_re
  @eof = false
  @bound_variables_stack = []
end

def start_merged_variables_scope
  set = @bound_variables_stack.last&.dup || Set.new
  @bound_variables_stack.push set
end

def start_new_variables_scope
  @bound_variables_stack.push Set.new
end

def reset_variable_scope
  @bound_variables_stack.pop
end

def insert_bound_variable(var)
  @bound_variables_stack.last << var
end

def is_bound_variable?(var)
  (@bound_variables_stack.last || Set.new).member?(var)
end

def self.parse_signature(input, eof_re: nil)
  case input
  when RBS::Buffer
    buffer = input
  else
    buffer = RBS::Buffer.new(name: nil, content: input.to_s)
  end

  self.new(:SIGNATURE, buffer: buffer, eof_re: eof_re).do_parse
end

def self.parse_type(input, variables: [], eof_re: nil)
  case input
  when RBS::Buffer
    buffer = input
  else
    buffer = RBS::Buffer.new(name: nil, content: input.to_s)
  end

  self.new(:TYPE, buffer: buffer, eof_re: eof_re).yield_self do |parser|
    parser.start_new_variables_scope

    variables.each do |var|
      parser.insert_bound_variable var
    end

    parser.do_parse
  ensure
    parser.reset_variable_scope
  end
end

def self.parse_method_type(input, variables: [], eof_re: nil)
  case input
  when RBS::Buffer
    buffer = input
  else
    buffer = RBS::Buffer.new(name: nil, content: input.to_s)
  end

  self.new(:METHODTYPE, buffer: buffer, eof_re: eof_re).yield_self do |parser|
    parser.start_new_variables_scope

    variables.each do |var|
      parser.insert_bound_variable var
    end

    parser.do_parse
  ensure
    parser.reset_variable_scope
  end
end
#
# def new_token(type, value = input.matched)
#   charpos = charpos(input)
#   matched = input.matched
#
#   if matched
#     start_index = charpos - matched.size
#     end_index = charpos
#     [type, LocatedValue.new(value: value, buffer: buffer, range: start_index...end_index)]
#   else
#     # scanner hasn't matched yet
#     [false, nil]
#   end
# end

def empty_params_result
  [
    [],
    [],
    nil,
    [],
    {},
    {},
    nil
  ]
end

class Lex < Lexer
  KEYWORDS = {
    "class" => :kCLASS,
    "type" => :kTYPE,
    "def" => :kDEF,
    "self" => :kSELF,
    "void" => :kVOID,
    "any" => :kANY,
    "untyped" => :kUNTYPED,
    "top" => :kTOP,
    "bot" => :kBOT,
    "instance" => :kINSTANCE,
    "bool" => :kBOOL,
    "nil" => :kNIL,
    "true" => :kTRUE,
    "false" => :kFALSE,
    "singleton" => :kSINGLETON,
    "interface" => :kINTERFACE,
    "end" => :kEND,
    "include" => :kINCLUDE,
    "extend" => :kEXTEND,
    "prepend" => :kPREPEND,
    "module" => :kMODULE,
    "attr_reader" => :kATTRREADER,
    "attr_writer" => :kATTRWRITER,
    "attr_accessor" => :kATTRACCESSOR,
    "public" => :kPUBLIC,
    "private" => :kPRIVATE,
    "alias" => :kALIAS,
    "extension" => :kEXTENSION,
    "incompatible" => :kINCOMPATIBLE,
    "unchecked" => :kUNCHECKED,
    "overload" => :kOVERLOAD,
    "out" => :kOUT,
    "in" => :kIN,
  }
  KEYWORDS_RE = /#{Regexp.union(*KEYWORDS.keys)}\b/

  PUNCTS = {
    "===" => :tOPERATOR,
    "==" => :tOPERATOR,
    "=~" => :tOPERATOR,
    "!~" => :tOPERATOR,
    "!=" => :tOPERATOR,
    ">=" => :tOPERATOR,
    "<<" => :tOPERATOR,
    "<=>" => :tOPERATOR,
    "<=" => :tOPERATOR,
    ">>" => :tOPERATOR,
    ">" => :tOPERATOR,
    "~" => :tOPERATOR,
    "+@" => :tOPERATOR,
    "+" => :tOPERATOR,
    "[]=" => :tOPERATOR,
    "[]" => :tOPERATOR,
    "::" => :kCOLON2,
    ":" => :kCOLON,
    "(" => :kLPAREN,
    ")" => :kRPAREN,
    "[" => :kLBRACKET,
    "]" => :kRBRACKET,
    "{" => :kLBRACE,
    "}" => :kRBRACE,
    "," => :kCOMMA,
    "|" => :kBAR,
    "&" => :kAMP,
    "^" => :kHAT,
    "->" => :kARROW,
    "=>" => :kFATARROW,
    "=" => :kEQ,
    "?" => :kQUESTION,
    "!" => :kEXCLAMATION,
    "**" => :kSTAR2,
    "*" => :kSTAR,
    "..." => :kDOT3,
    "." => :kDOT,
    "<" => :kLT,
    "-@" => :tOPERATOR,
    "-" => :tOPERATOR,
    "/" => :tOPERATOR,
    "`" => :tOPERATOR,
    "%" => :tOPERATOR,
  }
  PUNCTS_RE = Regexp.union(*PUNCTS.keys)

  ANNOTATION_RE = Regexp.union(
    /%a\{[^\}]*\}/,
    /%a\[[^\]]*\]/,
    /%a\([^\)]*\)/,
    /%a\<[^>]*\>/,
    /%a\|[^\|]*\|/
  )

  skip(/\s+/)
  token(:tCOMMENT, /#(( *)|( ?(?<string>.*)))\n/)
  token_invoke(:quoted_ident, /`[a-zA-Z_]\w*`/)
  token_invoke(:quoted_method, /`(\\`|[^` :])+`/)
  token_invoke(:annotation, ANNOTATION_RE)
  token(:kSELFQ, "self?")
  token(:tWRITE_ATTR, /(([a-zA-Z]\w*)|(_\w+))=/)
  token_invoke(:keyword, KEYWORDS_RE)
  token_invoke(:symbol, /:((@{,2}|\$)?\w+(\?|\!)?|[|&\/%~`^]|<=>|={2,3}|=~|[<>]{2}|[<>]=?|[-+]@?|\*{1,2}|\[\]=?|![=~]?)\b?/)
  token_invoke(:integer, /[+-]?\d[\d_]*/)
  token_invoke(:punct, PUNCTS_RE)
  token(:tNAMESPACE, /(::)?([A-Z]\w*::)+/)
  token_invoke(:lkeyword_arg, /[a-z_]\w*:/)
  token_invoke(:lkeyword_q_e_arg, /[a-z_]\w*[?!]:/)
  token_invoke(:ukeyword_arg, /[A-Z]\w*:/)
  token_invoke(:ukeyword_q_e_arg, /[A-Z]\w*[?!]:/)
  token(:tGLOBALIDENT, /\$[A-Za-z_]\w*/)
  token(:tIVAR, /@[a-zA-Z_]\w*/)
  token(:tCLASSVAR, /@@[a-zA-Z_]\w*/)
  token(:tINTERFACEIDENT, /_[A-Z]\w*\b/)
  token(:tUIDENT, /[A-Z]\w*\b/)
  token(:tLIDENT, /[a-z]\w*\b/)
  token(:tUNDERSCOREIDENT, /_[a-z]\w*\b/)
  token(:tPARAMNAME, /_[\w_]*\b/)
  token_invoke(:double_quoted_string, /"(\\"|[^"])*"/)
  token_invoke(:single_quoted_string, /'(\\'|[^'])*'/)

  def quoted_ident(string)
    string[0] = ""
    string.chop!
    yield :tQUOTEDIDENT, string
  end

  def quoted_method(string)
    string[0] = ""
    string.chop!
    string.gsub!(/\\`/, '`')
    yield :tQUOTEDMETHOD, string
  end

  def annotation(string)
    string[0..2] = ""
    string.chop!
    string.strip!
    yield :tANNOTATION, string
  end

  def keyword(string)
    yield KEYWORDS[string], string
  end

  def symbol(string)
    string[0] = ""
    yield :tSYMBOL, string.to_sym
  end

  def integer(string)
    yield :tINTEGER, string.to_i
  end

  def punct(string)
    yield PUNCTS[string], string
  end

  def lkeyword_arg(string)
    string.chop!
    yield :tLKEYWORD, string.to_sym
  end

  def lkeyword_q_e_arg(string)
    string.chop!
    yield :tLKEYWORD_Q_E, string.to_sym
  end

  def ukeyword_arg(string)
    string.chop!
    yield :tUKEYWORD, string.to_sym
  end

  def ukeyword_q_e_arg(string)
    string.chop!
    yield :tUKEYWORD_Q_E, string.to_sym
  end

  def double_quoted_string(string)
    string[0] = ""
    string.chop!
    string.gsub!(/\\[abefnrstv"\\]/,
      {
        '\a' => "\a",
        '\b' => "\b",
        '\e' => "\e",
        '\f' => "\f",
        '\n' => "\n",
        '\r' => "\r",
        '\s' => "\s",
        '\t' => "\t",
        '\v' => "\v",
        '\"' => "\"",
        '\\' => "\\"
      }
    )
    yield :tSTRING, string
  end

  def single_quoted_string(string)
    string[0] = ""
    string.chop!
    string.gsub!(/\\'/, "'")
    yield :tSTRING, string
  end

  def on_error
    text = scanner.peek(10)
    start_index = scanner.charpos
    end_index = start_index + text.length
    location = RBS::Location.new(buffer: buffer, start_pos: start_index, end_pos: end_index)
    raise LexerError.new(input: text, location: location)
  end
end

def next_token
  if @type
    type = @type
    @type = nil
    return [:"type_#{type}", nil]
  end

  if @eof_re && tokenizer.match?(@eof_re)
    @eof = true
  end

  if @eof
    pos = tokenizer.scanner.char_pos
    return [:tEOF, "$"]
  end


  ret = tokenizer.next_token() or return

  if ret[0] == :tCOMMENT
    t = ret[1]
    value = tokenizer.value(t)
    start_index = tokenizer.start_pos(t)
    end_index = tokenizer.end_pos(t) - 1
    value.sub!(/\A# ?/, '')
    value.chomp!
    buffer.insert_comment value, start_index, end_index

    next_token()
  else
    ret
  end

  # return new_token(false, '') if @eof

  # while true
  #   return new_token(false, '') if input.eos?
  #
  #   case
  #   when input.skip(/\s+/)
  #     # skip
  #   when input.scan(/#(( *)|( ?(?<string>.*)))\n/)
  #     charpos = charpos(input)
  #     start_index = charpos - input.matched.size
  #     end_index = charpos-1
  #     buffer.insert_comment input[:string] || "", start_index, end_index
  #   else
  #     break
  #   end
  # end

  # case
  # when eof_re && input.scan(eof_re)
  #   @eof = true
  #   [:tEOF, input.matched]
  # when input.scan(/`[a-zA-Z_]\w*`/)
  #   s = input.matched.yield_self {|s| s[1, s.length-2] }
  #   new_token(:tQUOTEDIDENT, s)
  # when input.scan(/`(\\`|[^` :])+`/)
  #   s = input.matched.yield_self {|s| s[1, s.length-2] }.gsub(/\\`/, '`')
  #   new_token(:tQUOTEDMETHOD, s)
  # when input.scan(ANNOTATION_RE)
  #   s = input.matched.yield_self {|s| s[3, s.length-4] }.strip
  #   new_token(:tANNOTATION, s)
  # when input.scan(/self\?/)
  #   new_token(:kSELFQ, "self?")
  # when input.scan(/(([a-zA-Z]\w*)|(_\w+))=/)
  #   new_token(:tWRITE_ATTR)
  # when input.scan(KEYWORDS_RE)
  #   new_token(KEYWORDS[input.matched], input.matched.to_sym)
  # when input.scan(/:((@{,2}|\$)?\w+(\?|\!)?|[|&\/%~`^]|<=>|={2,3}|=~|[<>]{2}|[<>]=?|[-+]@?|\*{1,2}|\[\]=?|![=~]?)\b?/)
  #   s = input.matched.yield_self {|s| s[1, s.length] }.to_sym
  #   new_token(:tSYMBOL, s)
  # when input.scan(/[+-]?\d[\d_]*/)
  #   new_token(:tINTEGER, input.matched.to_i)
  # when input.scan(PUNCTS_RE)
  #   new_token(PUNCTS[input.matched])
  # when input.scan(/(::)?([A-Z]\w*::)+/)
  #   new_token(:tNAMESPACE)
  # when input.scan(/[a-z_]\w*:/)
  #   new_token(:tLKEYWORD, input.matched.chop.to_sym)
  # when input.scan(/[a-z_]\w*[?!]:/)
  #   new_token(:tLKEYWORD_Q_E, input.matched.chop.to_sym)
  # when input.scan(/[A-Z]\w*:/)
  #   new_token(:tUKEYWORD, input.matched.chop.to_sym)
  # when input.scan(/[A-Z]\w*[?!]:/)
  #   new_token(:tUKEYWORD_Q_E, input.matched.chop.to_sym)
  # when input.scan(/\$[A-Za-z_]\w*/)
  #   new_token(:tGLOBALIDENT)
  # when input.scan(/@[a-zA-Z_]\w*/)
  #   new_token(:tIVAR, input.matched.to_sym)
  # when input.scan(/@@[a-zA-Z_]\w*/)
  #   new_token(:tCLASSVAR, input.matched.to_sym)
  # when input.scan(/_[A-Z]\w*\b/)
  #   new_token(:tINTERFACEIDENT)
  # when input.scan(/[A-Z]\w*\b/)
  #   new_token(:tUIDENT)
  # when input.scan(/[a-z]\w*\b/)
  #   new_token(:tLIDENT)
  # when input.scan(/_[a-z]\w*\b/)
  #   new_token(:tUNDERSCOREIDENT)
  # when input.scan(/_[\w_]*\b/)
  #   new_token(:tPARAMNAME)
  # when input.scan(/"(\\"|[^"])*"/)
  #   s = input.matched.yield_self {|s| s[1, s.length - 2] }
  #                    .gsub(DBL_QUOTE_STR_ESCAPE_SEQUENCES_RE) do |match|
  #                      case match
  #                      when '\\a' then "\a"
  #                      when '\\b' then "\b"
  #                      when '\\e' then "\e"
  #                      when '\\f' then "\f"
  #                      when '\\n' then "\n"
  #                      when '\\r' then "\r"
  #                      when '\\s' then "\s"
  #                      when '\\t' then "\t"
  #                      when '\\v' then "\v"
  #                      when '\\"' then '"'
  #                      end
  #                    end
  #   new_token(:tSTRING, s)
  # when input.scan(/'(\\'|[^'])*'/)
  #   s = input.matched.yield_self {|s| s[1, s.length - 2] }.gsub(/\\'/, "'")
  #   new_token(:tSTRING, s)
  # else
  # end
end

def on_error(token_id, error_value, value_stack)
  raise SyntaxError.new(
    token_str: token_to_str(token_id),
    error_value:
      case
      when error_value == "$"
        # EOF??
        pos = tokenizer.scanner.charpos
        LocatedValue.new(value: "$", buffer: buffer, range: pos-1...pos)
      when tokenizer.semantic_value?(error_value)
        LocatedValue.new(value: tokenizer.value(error_value), location: location(token: error_value))
      else
        error_value
      end,
    value_stack: value_stack
  )
end

def split_kw_loc(loc)
  buf = loc.buffer
  start_pos = loc.start_pos
  end_pos = loc.end_pos
  [
    Location.new(buffer: buf, start_pos: start_pos, end_pos: end_pos - 1),
    Location.new(buffer: buf, start_pos: end_pos - 1, end_pos: end_pos)
  ]
end

class SyntaxError < ParsingError
  attr_reader :token_str, :error_value, :value_stack

  def initialize(token_str:, error_value:, value_stack: nil)
    @token_str = token_str
    @error_value = error_value
    @value_stack = value_stack

    super "parse error on value: #{error_value.inspect} (`#{token_str}`)"
  end
end

class SemanticsError < ParsingError
  attr_reader :subject, :location, :original_message

  def initialize(message, subject:, location:)
    @subject = subject
    @location = location
    @original_message = message

    super "parse error on #{location}: #{message}"
  end
end

class LexerError < ParsingError
  attr_reader :location, :input

  def initialize(input:, location:)
    @input = input
    @location = location

    super "Unexpected string: #{input}..."
  end
end

...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
   192,   195,    33,   193,   192,   195,    33,   193,   192,   195,
    33,   193,   113,   192,   195,    33,   193,   192,   195,   160,
   193,   180,   324,   192,   195,    33,   193,   185,   179,    33,
   228,    33,    33,    33,     5,    33,    33,    33,    37,   174,
   283,   322,   177,    32,   175,    40,    41,    32,   161,    40,
    41,    32,   186,    40,    41,   229,    32,    49,    40,    41,
   293,    49,    40,    41,   176,   284,    32,   194,    40,    41,
    32,   194,    32,    32,    32,   194,    32,    32,    32,   196,
   194,   352,   353,   196,   194,   354,    42,   196,   334,    53,
   194,   338,   196,    53,   209,   408,   196,   343,   209,   336,
    40,    41,   196,   407,    55,    56,    57,    58,    59,    60,
    61,    62,   356,   186,    63,    54,    64,    65,    66,    77,
    67,    68,    69,    83,    40,    41,    53,   351,   345,   346,
    53,   367,   349,   347,   350,   126,     2,     3,     4,   348,
    82,    70,    71,    72,    74,    76,    75,   344,   341,   342,
    73,    78,    80,    39,   399,   411,   186,    84,    85,    81,
    86,   352,   353,    40,    41,   354,   180,    43,   412,    -4,
    48,  -245,   104,   264,    33,    39,   117,   343,  -245,   186,
   186,    40,    41,   113,    55,    56,    57,    58,    59,    60,
    61,    62,    79,   186,    63,    54,    64,    65,    66,    77,
    67,    68,    69,    83,    40,    41,   120,   351,   345,   346,
    40,    41,   349,   347,   350,    32,    40,    41,   125,   348,
    82,    70,    71,    72,    74,    76,    75,   344,   341,   342,
    73,    78,    80,    40,    41,    40,    41,    84,    85,    81,
    86,   352,   353,    40,    41,   354,    39,    96,    97,    98,
    99,   101,   102,    40,    41,   103,   165,   343,    40,    41,
    40,    41,    40,    41,    55,    56,    57,    58,    59,    60,
    61,    62,    79,   166,    63,    54,    64,    65,    66,    77,
    67,    68,    69,    83,    40,    41,   167,   351,   345,   346,
   286,   287,   349,   347,   350,   370,   371,    40,    41,   348,
    82,    70,    71,    72,    74,    76,    75,   344,   341,   342,
    73,    78,    80,    40,    41,   386,   387,    84,    85,    81,
    86,   352,   353,    40,    41,   354,   168,    96,    97,    98,
    99,    40,    41,    40,    41,    40,    41,   343,    40,    41,
    40,    41,    40,    41,    55,    56,    57,    58,    59,    60,
    61,    62,    79,   170,    63,    54,    64,    65,    66,    77,
    67,    68,    69,    83,   171,   172,   113,   351,   345,   346,
   178,   181,   349,   347,   350,   184,    41,   187,   189,   348,
    82,    70,    71,    72,    74,    76,    75,   344,   341,   342,
    73,    78,    80,   180,   190,  -105,  -106,    84,    85,    81,
    86,   352,   353,  -107,  -108,   354,  -109,    96,    97,    98,
    99,  -110,  -111,  -112,  -113,  -114,  -115,   343,    48,  -130,
   197,   198,   199,   200,    55,    56,    57,    58,    59,    60,
    61,    62,    79,   201,    63,    54,    64,    65,    66,    77,
    67,    68,    69,    83,   202,   210,   211,   351,   345,   346,
    42,   212,   349,   347,   350,   230,   244,   253,   254,   348,
    82,    70,    71,    72,    74,    76,    75,   344,   341,   342,
    73,    78,    80,   255,   257,   259,   260,    84,    85,    81,
    86,   352,   353,    42,   262,   354,   262,   262,   266,    42,
   230,   270,   274,   276,   291,   292,   315,   343,   274,   317,
   291,   330,   331,   332,    55,    56,    57,    58,    59,    60,
    61,    62,    79,   358,    63,    54,    64,    65,    66,    77,
    67,    68,    69,    83,   358,   358,   366,   351,   345,   346,
   368,   369,   349,   347,   350,   372,   374,   381,   382,   348,
    82,    70,    71,    72,    74,    76,    75,   344,   341,   342,
    73,    78,    80,   383,   391,   391,   391,    84,    85,    81,
    86,   352,   353,   403,   404,   354,   405,    96,    97,    98,
    99,   406,   409,   410,   415,   416,   417,   343,   419,   422,
   415,   nil,   nil,   nil,    55,    56,    57,    58,    59,    60,
    61,    62,    79,   nil,    63,    54,    64,    65,    66,    77,
    67,    68,    69,    83,   nil,   nil,   nil,   351,   345,   346,
   nil,   nil,   349,   347,   350,   nil,   nil,   nil,   nil,   348,
    82,    70,    71,    72,    74,    76,    75,   344,   341,   342,
    73,    78,    80,   nil,   nil,   nil,   nil,    84,    85,    81,
    86,   352,   353,   nil,   nil,   354,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   343,   nil,   nil,
   nil,   nil,   nil,   nil,    55,    56,    57,    58,    59,    60,
    61,    62,    79,   nil,    63,    54,    64,    65,    66,    77,
    67,    68,    69,    83,   nil,   nil,   nil,   351,   345,   346,
   nil,   nil,   349,   347,   350,   nil,   nil,   nil,   nil,   348,
    82,    70,    71,    72,    74,    76,    75,   344,   341,   342,
    73,    78,    80,   nil,   nil,   nil,   nil,    84,    85,    81,
    86,    33,   nil,   nil,    96,    97,    98,    99,   nil,   nil,
   nil,    22,    23,    21,   nil,    26,  -220,    25,   nil,    30,
   nil,   131,   132,   133,   134,   135,   136,   137,   138,   142,
    16,   139,   130,   140,   141,    66,    77,    67,    68,    69,
    83,   nil,    32,   nil,   nil,   nil,    28,   nil,   156,   nil,
   157,   159,   nil,   nil,   nil,   nil,   nil,    82,    70,    71,
    72,    74,    76,    75,   nil,   nil,   nil,    73,    78,    80,
   nil,   nil,   nil,   nil,    84,    85,    81,    86,    33,   nil,
   nil,    96,    97,    98,    99,   nil,   nil,   nil,    22,    23,
    21,   nil,    26,   nil,    25,   nil,    30,   nil,   131,   132,
   133,   134,   135,   136,   137,   138,   142,    16,   139,   130,
   140,   141,    66,    77,    67,    68,    69,    83,   nil,    32,
   nil,   nil,   nil,    28,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    82,    70,    71,    72,    74,    76,
    75,   nil,   nil,   nil,    73,    78,    80,   nil,   nil,   nil,
   nil,    84,    85,    81,    86,    33,   nil,   nil,    96,    97,
    98,    99,   nil,   nil,   nil,    22,    23,    21,   nil,    26,
  -220,    25,   nil,    30,   nil,   131,   132,   133,   134,   135,
   136,   137,   138,   142,    16,   139,   130,   140,   141,    66,
    77,    67,    68,    69,    83,   nil,    32,   nil,   nil,   nil,
    28,   nil,   156,   nil,   157,   159,   nil,   nil,   nil,   nil,
   nil,    82,    70,    71,    72,    74,    76,    75,   nil,   nil,
   nil,    73,    78,    80,   nil,   nil,   nil,   nil,    84,    85,
    81,    86,    33,   nil,   nil,    96,    97,    98,    99,   nil,
   nil,   nil,    22,    23,    21,   nil,    26,  -220,    25,   nil,
    30,   nil,   131,   132,   133,   134,   135,   136,   137,   138,
   142,    16,   139,   130,   140,   141,    66,    77,    67,    68,
    69,    83,   nil,    32,   nil,   nil,   nil,    28,   nil,   156,
   nil,   157,   159,   nil,   nil,   nil,   nil,   nil,    82,    70,
    71,    72,    74,    76,    75,   nil,   nil,   nil,    73,    78,
    80,   nil,   nil,   nil,   nil,    84,    85,    81,    86,    33,
   nil,   nil,    96,    97,    98,    99,   nil,   nil,   nil,    22,
    23,    21,   nil,    26,  -220,    25,   nil,    30,   nil,   131,
   132,   133,   134,   135,   136,   137,   138,   142,    16,   139,
   130,   140,   141,    66,    77,    67,    68,    69,    83,   nil,
    32,   nil,   nil,   nil,    28,   nil,   236,   nil,   nil,   159,
   nil,   nil,   nil,   nil,   nil,    82,    70,    71,    72,    74,
    76,    75,   nil,   nil,   nil,    73,    78,    80,   nil,   nil,
   nil,   nil,    84,    85,    81,    86,    33,   nil,   nil,    96,
    97,    98,    99,   nil,   nil,   nil,    22,    23,    21,   nil,
    26,  -220,    25,   nil,    30,   nil,   131,   132,   133,   134,
   135,   136,   137,   138,   142,    16,   139,   130,   140,   141,
    66,    77,    67,    68,    69,    83,   nil,    32,   nil,   nil,
   nil,    28,   nil,   156,   nil,   157,   159,   nil,   nil,   nil,
   nil,   nil,    82,    70,    71,    72,    74,    76,    75,   nil,
   nil,   nil,    73,    78,    80,   nil,   nil,   nil,   nil,    84,
    85,    81,    86,    33,   nil,   nil,    96,    97,    98,    99,
   nil,   nil,   nil,    22,    23,    21,   nil,    26,  -220,    25,
   nil,    30,   nil,   131,   132,   133,   134,   135,   136,   137,
   138,   142,    16,   139,   130,   140,   141,    66,    77,    67,
    68,    69,    83,   nil,    32,   nil,   nil,   nil,    28,   nil,
   236,   nil,   nil,   159,   nil,   nil,   nil,   nil,   nil,    82,
    70,    71,    72,    74,    76,    75,   nil,   nil,   nil,    73,
    78,    80,   nil,   nil,   nil,   nil,    84,    85,    81,    86,
    96,    97,    98,    99,   nil,   nil,   nil,    90,    89,    91,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    55,    56,    57,
    58,    59,    60,    61,    62,    79,   nil,    63,    54,    64,
    65,    66,    77,    67,    68,    69,    83,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    82,    70,    71,    72,    74,    76,    75,
   nil,    95,    94,    73,    78,    80,   nil,   nil,   nil,   nil,
    84,    85,    81,    86,    96,    97,    98,    99,   nil,   nil,
   nil,    90,    89,    91,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    55,    56,    57,    58,    59,    60,    61,    62,    79,
   nil,    63,    54,    64,    65,    66,    77,    67,    68,    69,
    83,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    82,    70,    71,
    72,    74,    76,    75,   nil,    95,    94,    73,    78,    80,
    96,    97,    98,    99,    84,    85,    81,    86,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    55,    56,    57,
    58,    59,    60,    61,    62,    79,   nil,    63,    54,    64,
    65,    66,    77,    67,    68,    69,    83,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   236,   nil,   nil,   159,   nil,   nil,
   nil,   nil,   nil,    82,    70,    71,    72,    74,    76,    75,
   nil,   nil,   nil,    73,    78,    80,    96,    97,    98,    99,
    84,    85,    81,    86,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    55,    56,    57,    58,    59,    60,    61,
    62,    79,   nil,    63,    54,    64,    65,    66,    77,    67,
    68,    69,    83,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   236,   nil,   nil,   159,   nil,   nil,   nil,   nil,   nil,    82,
    70,    71,    72,    74,    76,    75,   nil,   nil,   nil,    73,
    78,    80,    96,    97,    98,    99,    84,    85,    81,    86,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    55,
    56,    57,    58,    59,    60,    61,    62,    79,   nil,    63,
    54,    64,    65,    66,    77,    67,    68,    69,    83,  -245,
   nil,   nil,    33,   nil,   117,   nil,  -245,   nil,   nil,   312,
   313,   113,   nil,   nil,   nil,    82,    70,    71,    72,    74,
    76,    75,   nil,   nil,   nil,    73,    78,    80,   nil,   nil,
   314,   nil,    84,    85,    81,    86,   nil,   nil,   nil,   309,
   308,  -245,   nil,    32,    33,   nil,   117,   nil,  -245,   nil,
   nil,   312,   313,   113,   nil,  -245,   nil,   nil,    33,   300,
   117,   nil,  -245,   nil,   nil,   312,   313,   113,   nil,   nil,
   nil,   nil,   314,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   309,   308,   nil,   nil,    32,   314,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   309,   308,   nil,    33,    32,
   nil,   318,   nil,   nil,   nil,   nil,   nil,   nil,    22,    23,
    21,   nil,    26,   nil,    25,   319,    30,   nil,     8,    12,
    19,    20,     9,    10,    13,    14,    15,    16,    17,    18,
    11,    27,   nil,   nil,    33,   nil,   nil,   nil,   nil,    32,
   nil,   nil,   nil,    28,    22,    23,    21,   nil,    26,   nil,
    25,    45,    30,   nil,     8,    12,    19,    20,     9,    10,
    13,    14,    15,    16,    17,    18,    11,    27,   nil,   nil,
    33,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,    28,
    22,    23,    21,   nil,    26,   nil,    25,   nil,    30,   nil,
     8,    12,    19,    20,     9,    10,    13,    14,    15,    16,
    17,    18,    11,    27,   nil,   nil,    33,   nil,   nil,   nil,
   nil,    32,   nil,   nil,   nil,    28,    22,    23,    21,   nil,
    26,   nil,    25,   nil,    30,   nil,     8,    12,    19,    20,
     9,    10,    13,    14,    15,    16,    17,    18,    11,    27,
   nil,   nil,    33,   nil,   nil,   nil,   nil,    32,   nil,   nil,
   nil,    28,    22,    23,    21,   nil,    26,   nil,    25,   nil,
    30,   nil,     8,    12,    19,    20,     9,    10,    13,    14,
    15,    16,    17,    18,    11,    27,   nil,   nil,    33,   nil,
   nil,   nil,   nil,    32,   nil,   nil,   nil,    28,    22,    23,
    21,   nil,    26,   nil,    25,   nil,    30,   nil,     8,    12,
    19,    20,     9,    10,    13,    14,    15,    16,    17,    18,
    11,    27,   nil,   nil,    33,   nil,   nil,   nil,   nil,    32,
   nil,   nil,   nil,    28,    22,    23,    21,   nil,    26,   nil,
    25,   nil,    30,   nil,     8,    12,    19,    20,     9,    10,
    13,    14,    15,    16,    17,    18,    11,    27,   nil,   nil,
    33,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,    28,
    22,    23,    21,   nil,    26,   nil,    25,   nil,    30,   nil,
     8,    12,    19,    20,     9,    10,    13,    14,    15,    16,
    17,    18,    11,    27,   nil,   nil,    33,   nil,   nil,   nil,
   nil,    32,   nil,   nil,   nil,    28,    22,    23,    21,   nil,
    26,   nil,    25,  -249,    30,   nil,     8,    12,    19,    20,
     9,    10,    13,    14,    15,    16,    17,    18,    11,    27,
   nil,   nil,    33,   nil,   nil,   nil,   nil,    32,   nil,   nil,
   nil,    28,    22,    23,    21,   nil,    26,   nil,    25,   nil,
    30,   nil,     8,    12,    19,    20,     9,    10,    13,    14,
    15,    16,    17,    18,    11,    27,   nil,   nil,    33,   nil,
   nil,   nil,   nil,    32,   nil,   nil,   nil,    28,    22,    23,
    21,   nil,    26,   nil,    25,   nil,    30,   nil,     8,    12,
    19,    20,     9,    10,    13,    14,    15,    16,    17,    18,
    11,    27,   nil,   nil,    33,   nil,   nil,   nil,   nil,    32,
   nil,   nil,   nil,    28,    22,    23,    21,   nil,    26,   nil,
    25,   nil,    30,   nil,     8,    12,    19,    20,     9,    10,
    13,    14,    15,    16,    17,    18,    11,    27,   nil,   nil,
    33,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,    28,
    22,    23,    21,   nil,    26,   nil,    25,   nil,    30,   nil,
     8,    12,    19,    20,     9,    10,    13,    14,    15,    16,
    17,    18,    11,    27,   nil,   nil,    33,   nil,   nil,   nil,
   nil,    32,   nil,   nil,   nil,    28,    22,    23,    21,   nil,
    26,   nil,    25,   nil,    30,   nil,     8,    12,    19,    20,
     9,    10,    13,    14,    15,    16,    17,    18,    11,    27,
   nil,   nil,    33,   nil,   nil,   nil,   nil,    32,   nil,   nil,
   nil,    28,    22,    23,    21,   nil,    26,   nil,    25,   nil,
    30,   nil,     8,    12,    19,    20,     9,    10,    13,    14,
    15,    16,    17,    18,    11,    27,   nil,   nil,    33,   nil,
   nil,   nil,   nil,    32,   nil,   nil,   nil,    28,    22,    23,
    21,   nil,    26,   nil,    25,   nil,    30,   nil,     8,    12,
    19,    20,     9,    10,    13,    14,    15,    16,    17,    18,
    11,    27,   nil,   nil,    33,   nil,   nil,   nil,   nil,    32,
   nil,   nil,   nil,    28,    22,    23,    21,   nil,    26,   nil,
    25,   nil,    30,   nil,     8,    12,    19,    20,     9,    10,
    13,    14,    15,    16,    17,    18,    11,    27,   nil,   nil,
    33,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,    28,
    22,    23,    21,   nil,    26,   nil,    25,   nil,    30,   nil,
     8,    12,    19,    20,     9,    10,    13,    14,    15,    16,
    17,    18,    11,    27,   nil,   nil,    33,   nil,   nil,   nil,
   nil,    32,   nil,   nil,   nil,    28,    22,    23,    21,   nil,
    26,   nil,    25,   nil,    30,   nil,     8,    12,    19,    20,
     9,    10,    13,    14,    15,    16,    17,    18,    11,    27,
   nil,   nil,    33,   nil,   nil,   nil,   nil,    32,   nil,   nil,
   nil,    28,    22,    23,    21,   nil,    26,   nil,    25,   nil,
    30,   nil,     8,    12,    19,    20,     9,    10,    13,    14,
    15,    16,    17,    18,    11,    27,   nil,   nil,    33,   nil,
   nil,   nil,   nil,    32,   nil,   nil,   nil,    28,    22,    23,
    21,   nil,    26,   nil,    25,   nil,    30,   nil,     8,    12,
    19,    20,     9,    10,    13,    14,    15,    16,    17,    18,
    11,    27,   nil,   nil,    33,   nil,   nil,   nil,   nil,    32,
   nil,   nil,   nil,    28,    22,    23,    21,   nil,    26,   nil,
    25,   nil,    30,   nil,     8,    12,    19,    20,     9,    10,
    13,    14,    15,    16,    17,    18,    11,    27,   nil,   nil,
    33,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,    28,
    22,    23,    21,   nil,    26,   nil,    25,   nil,    30,   nil,
     8,    12,    19,    20,     9,    10,    13,    14,    15,    16,
    17,    18,    11,    27,   nil,   nil,    33,   nil,   nil,   nil,
   nil,    32,   nil,   nil,   nil,    28,    22,    23,    21,   nil,
    26,   nil,    25,   nil,    30,   nil,     8,    12,    19,    20,
     9,    10,    13,    14,    15,    16,    17,    18,    11,    27,
   nil,   nil,    33,   nil,   nil,   nil,   nil,    32,   nil,   nil,
   nil,    28,    22,    23,    21,   nil,    26,   nil,    25,   nil,
    30,   nil,     8,    12,    19,    20,     9,    10,    13,    14,
    15,    16,    17,    18,    11,    27,   nil,   nil,    33,   nil,
   nil,   nil,   nil,    32,   nil,   nil,   nil,    28,    22,    23,
    21,   nil,    26,   nil,    25,   nil,    30,   nil,     8,    12,
    19,    20,     9,    10,    13,    14,    15,    16,    17,    18,
    11,    27,   nil,   nil,    33,   nil,   nil,   nil,   nil,    32,
   nil,   nil,   nil,    28,    22,    23,    21,   nil,    26,   nil,
    25,   nil,    30,   nil,     8,    12,    19,    20,     9,    10,
    13,    14,    15,    16,    17,    18,    11,    27,   nil,   nil,
    33,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,    28,
    22,    23,    21,   nil,    26,   nil,    25,   nil,    30,   nil,
     8,    12,    19,    20,     9,    10,    13,    14,    15,    16,
    17,    18,    11,    27,   nil,   nil,    33,   nil,   nil,   nil,
   nil,    32,   nil,   nil,   nil,    28,    22,    23,    21,   nil,
    26,   nil,    25,   nil,    30,   nil,     8,    12,    19,    20,
     9,    10,    13,    14,    15,    16,    17,    18,    11,    27,
   nil,   nil,    33,   nil,   nil,   nil,   nil,    32,   nil,   nil,
   nil,    28,    22,    23,    21,   nil,    26,   nil,    25,   nil,
    30,   nil,     8,    12,    19,    20,     9,    10,    13,    14,
    15,    16,    17,    18,    11,    27,   nil,   nil,    33,   nil,
   nil,   nil,   nil,    32,   nil,   nil,   nil,    28,    22,    23,
    21,   nil,    26,   nil,    25,   nil,    30,   nil,     8,    12,
    19,    20,     9,    10,    13,    14,    15,    16,    17,    18,
    11,    27,   nil,   nil,    33,   nil,   nil,   nil,   nil,    32,
   nil,   nil,   nil,    28,    22,    23,    21,   nil,    26,   nil,
    25,   nil,    30,   nil,     8,    12,    19,    20,     9,    10,
    13,    14,    15,    16,    17,    18,    11,    27,   nil,   nil,
    33,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,    28,
    22,    23,    21,   nil,    26,   nil,    25,   nil,    30,   nil,
     8,    12,    19,    20,     9,    10,    13,    14,    15,    16,
    17,    18,    11,    27,   nil,   nil,    33,   nil,   nil,   nil,
   nil,    32,   nil,   nil,   nil,    28,    22,    23,    21,   nil,
    26,   nil,    25,   nil,    30,   nil,     8,    12,    19,    20,
     9,    10,    13,    14,    15,    16,    17,    18,    11,    27,
   nil,   nil,    33,   nil,   nil,   nil,   nil,    32,   nil,   nil,
   nil,    28,    22,    23,    21,   nil,    26,   nil,    25,   nil,
    30,   nil,     8,    12,    19,    20,     9,    10,    13,    14,
    15,    16,    17,    18,    11,    27,   nil,   nil,    33,   nil,
   nil,   nil,   nil,    32,   nil,   nil,   nil,    28,    22,    23,
    21,   nil,    26,   nil,    25,   nil,    30,   nil,     8,    12,
    19,    20,     9,    10,    13,    14,    15,    16,    17,    18,
    11,    27,   nil,   nil,    33,   nil,   nil,   nil,   nil,    32,
   nil,   nil,   nil,    28,    22,    23,    21,   nil,    26,   nil,
    25,   nil,    30,   nil,     8,    12,    19,    20,     9,    10,
    13,    14,    15,    16,    17,    18,    11,    27,   nil,   nil,
    33,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,    28,
    22,    23,    21,   nil,    26,   nil,    25,   nil,    30,   nil,
     8,    12,    19,    20,     9,    10,    13,    14,    15,    16,
    17,    18,    11,    27,   nil,   nil,    33,   nil,   nil,   nil,
   nil,    32,   nil,   nil,   nil,    28,    22,    23,    21,   nil,
    26,   nil,    25,   nil,    30,   nil,     8,    12,    19,    20,
     9,    10,    13,    14,    15,    16,    17,    18,    11,    27,
   nil,   nil,    33,   nil,   nil,   nil,   nil,    32,   nil,   nil,
   nil,    28,    22,    23,    21,   nil,    26,   nil,    25,   nil,
    30,   nil,     8,    12,    19,    20,     9,    10,    13,    14,
    15,    16,    17,    18,    11,    27,   174,   nil,   nil,   177,
   nil,   175,   nil,    32,   324,   nil,   nil,    28,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   176,   nil,   322,   328,   325,   326,   327,   nil,   nil,
   nil,   329 ]

racc_action_check = [
   143,   143,    48,   143,   203,   203,   177,   203,   205,   205,
   220,   205,   280,   206,   206,   221,   206,   207,   207,    51,
   207,   116,   298,   240,   240,   222,   240,   123,   116,   264,
   183,   270,   276,   291,     1,   322,   328,   329,     5,   114,
   271,   298,   114,    48,   114,   143,   143,   177,    51,   203,
   203,   220,   123,   205,   205,   183,   221,    28,   206,   206,
   280,   119,   207,   207,   114,   271,   222,   143,   240,   240,
   264,   203,   270,   276,   291,   205,   322,   328,   329,   143,
   206,   324,   324,   203,   207,   324,     7,   205,   321,    28,
   240,   323,   206,   119,   160,   391,   207,   324,   210,   323,
    44,    44,   240,   391,   324,   324,   324,   324,   324,   324,
   324,   324,   324,   321,   324,   324,   324,   324,   324,   324,
   324,   324,   324,   324,     6,     6,   160,   324,   324,   324,
   210,   333,   324,   324,   324,    47,     0,     0,     0,   324,
   324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
   324,   324,   324,     6,   384,   396,   333,   324,   324,   324,
   324,   357,   357,    47,    47,   357,   250,    24,   397,    34,
    27,    34,    32,   250,    34,    35,    34,   357,    34,   384,
   396,   169,   169,    34,   357,   357,   357,   357,   357,   357,
   357,   357,   357,   397,   357,   357,   357,   357,   357,   357,
   357,   357,   357,   357,   188,   188,    36,   357,   357,   357,
   214,   214,   357,   357,   357,    34,   215,   215,    46,   357,
   357,   357,   357,   357,   357,   357,   357,   357,   357,   357,
   357,   357,   357,   216,   216,   217,   217,   357,   357,   357,
   357,   359,   359,   218,   218,   359,    34,   359,   359,   359,
   359,    31,    31,   219,   219,    31,    87,   359,   225,   225,
   226,   226,   227,   227,   359,   359,   359,   359,   359,   359,
   359,   359,   359,    89,   359,   359,   359,   359,   359,   359,
   359,   359,   359,   359,   267,   267,    90,   359,   359,   359,
   273,   273,   359,   359,   359,   340,   340,   364,   364,   359,
   359,   359,   359,   359,   359,   359,   359,   359,   359,   359,
   359,   359,   359,   365,   365,   369,   369,   359,   359,   359,
   359,   360,   360,   389,   389,   360,    91,   360,   360,   360,
   360,   392,   392,   394,   394,   398,   398,   360,   418,   418,
   420,   420,   421,   421,   360,   360,   360,   360,   360,   360,
   360,   360,   360,    93,   360,   360,   360,   360,   360,   360,
   360,   360,   360,   360,    94,    95,   113,   360,   360,   360,
   115,   117,   360,   360,   360,   120,   121,   124,   127,   360,
   360,   360,   360,   360,   360,   360,   360,   360,   360,   360,
   360,   360,   360,   128,   129,   130,   131,   360,   360,   360,
   360,   361,   361,   132,   133,   361,   134,   361,   361,   361,
   361,   135,   136,   137,   138,   139,   140,   361,   141,   142,
   145,   146,   148,   150,   361,   361,   361,   361,   361,   361,
   361,   361,   361,   153,   361,   361,   361,   361,   361,   361,
   361,   361,   361,   361,   154,   161,   162,   361,   361,   361,
   163,   164,   361,   361,   361,   190,   208,   223,   224,   361,
   361,   361,   361,   361,   361,   361,   361,   361,   361,   361,
   361,   361,   361,   229,   234,   245,   246,   361,   361,   361,
   361,   372,   372,   247,   248,   372,   249,   251,   252,   256,
   259,   261,   262,   263,   277,   279,   282,   372,   284,   285,
   289,   312,   313,   314,   372,   372,   372,   372,   372,   372,
   372,   372,   372,   325,   372,   372,   372,   372,   372,   372,
   372,   372,   372,   372,   326,   327,   332,   372,   372,   372,
   335,   337,   372,   372,   372,   356,   358,   362,   363,   372,
   372,   372,   372,   372,   372,   372,   372,   372,   372,   372,
   372,   372,   372,   366,   376,   378,   380,   372,   372,   372,
   372,   385,   385,   386,   387,   385,   388,   385,   385,   385,
   385,   390,   393,   395,   400,   402,   405,   385,   408,   414,
   422,   nil,   nil,   nil,   385,   385,   385,   385,   385,   385,
   385,   385,   385,   nil,   385,   385,   385,   385,   385,   385,
   385,   385,   385,   385,   nil,   nil,   nil,   385,   385,   385,
   nil,   nil,   385,   385,   385,   nil,   nil,   nil,   nil,   385,
   385,   385,   385,   385,   385,   385,   385,   385,   385,   385,
   385,   385,   385,   nil,   nil,   nil,   nil,   385,   385,   385,
   385,   417,   417,   nil,   nil,   417,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   417,   nil,   nil,
   nil,   nil,   nil,   nil,   417,   417,   417,   417,   417,   417,
   417,   417,   417,   nil,   417,   417,   417,   417,   417,   417,
   417,   417,   417,   417,   nil,   nil,   nil,   417,   417,   417,
   nil,   nil,   417,   417,   417,   nil,   nil,   nil,   nil,   417,
   417,   417,   417,   417,   417,   417,   417,   417,   417,   417,
   417,   417,   417,   nil,   nil,   nil,   nil,   417,   417,   417,
   417,    49,   nil,   nil,    49,    49,    49,    49,   nil,   nil,
   nil,    49,    49,    49,   nil,    49,    49,    49,   nil,    49,
   nil,    49,    49,    49,    49,    49,    49,    49,    49,    49,
    49,    49,    49,    49,    49,    49,    49,    49,    49,    49,
    49,   nil,    49,   nil,   nil,   nil,    49,   nil,    49,   nil,
    49,    49,   nil,   nil,   nil,   nil,   nil,    49,    49,    49,
    49,    49,    49,    49,   nil,   nil,   nil,    49,    49,    49,
   nil,   nil,   nil,   nil,    49,    49,    49,    49,   156,   nil,
   nil,   156,   156,   156,   156,   nil,   nil,   nil,   156,   156,
   156,   nil,   156,   nil,   156,   nil,   156,   nil,   156,   156,
   156,   156,   156,   156,   156,   156,   156,   156,   156,   156,
   156,   156,   156,   156,   156,   156,   156,   156,   nil,   156,
   nil,   nil,   nil,   156,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   156,   156,   156,   156,   156,   156,
   156,   nil,   nil,   nil,   156,   156,   156,   nil,   nil,   nil,
   nil,   156,   156,   156,   156,   198,   nil,   nil,   198,   198,
   198,   198,   nil,   nil,   nil,   198,   198,   198,   nil,   198,
   198,   198,   nil,   198,   nil,   198,   198,   198,   198,   198,
   198,   198,   198,   198,   198,   198,   198,   198,   198,   198,
   198,   198,   198,   198,   198,   nil,   198,   nil,   nil,   nil,
   198,   nil,   198,   nil,   198,   198,   nil,   nil,   nil,   nil,
   nil,   198,   198,   198,   198,   198,   198,   198,   nil,   nil,
   nil,   198,   198,   198,   nil,   nil,   nil,   nil,   198,   198,
   198,   198,   199,   nil,   nil,   199,   199,   199,   199,   nil,
   nil,   nil,   199,   199,   199,   nil,   199,   199,   199,   nil,
   199,   nil,   199,   199,   199,   199,   199,   199,   199,   199,
   199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
   199,   199,   nil,   199,   nil,   nil,   nil,   199,   nil,   199,
   nil,   199,   199,   nil,   nil,   nil,   nil,   nil,   199,   199,
   199,   199,   199,   199,   199,   nil,   nil,   nil,   199,   199,
   199,   nil,   nil,   nil,   nil,   199,   199,   199,   199,   200,
   nil,   nil,   200,   200,   200,   200,   nil,   nil,   nil,   200,
   200,   200,   nil,   200,   200,   200,   nil,   200,   nil,   200,
   200,   200,   200,   200,   200,   200,   200,   200,   200,   200,
   200,   200,   200,   200,   200,   200,   200,   200,   200,   nil,
   200,   nil,   nil,   nil,   200,   nil,   200,   nil,   nil,   200,
   nil,   nil,   nil,   nil,   nil,   200,   200,   200,   200,   200,
   200,   200,   nil,   nil,   nil,   200,   200,   200,   nil,   nil,
   nil,   nil,   200,   200,   200,   200,   209,   nil,   nil,   209,
   209,   209,   209,   nil,   nil,   nil,   209,   209,   209,   nil,
   209,   209,   209,   nil,   209,   nil,   209,   209,   209,   209,
   209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
   209,   209,   209,   209,   209,   209,   nil,   209,   nil,   nil,
   nil,   209,   nil,   209,   nil,   209,   209,   nil,   nil,   nil,
   nil,   nil,   209,   209,   209,   209,   209,   209,   209,   nil,
   nil,   nil,   209,   209,   209,   nil,   nil,   nil,   nil,   209,
   209,   209,   209,   257,   nil,   nil,   257,   257,   257,   257,
   nil,   nil,   nil,   257,   257,   257,   nil,   257,   257,   257,
   nil,   257,   nil,   257,   257,   257,   257,   257,   257,   257,
   257,   257,   257,   257,   257,   257,   257,   257,   257,   257,
   257,   257,   257,   nil,   257,   nil,   nil,   nil,   257,   nil,
   257,   nil,   nil,   257,   nil,   nil,   nil,   nil,   nil,   257,
   257,   257,   257,   257,   257,   257,   nil,   nil,   nil,   257,
   257,   257,   nil,   nil,   nil,   nil,   257,   257,   257,   257,
    30,    30,    30,    30,   nil,   nil,   nil,    30,    30,    30,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    30,    30,    30,
    30,    30,    30,    30,    30,    30,   nil,    30,    30,    30,
    30,    30,    30,    30,    30,    30,    30,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    30,    30,    30,    30,    30,    30,    30,
   nil,    30,    30,    30,    30,    30,   nil,   nil,   nil,   nil,
    30,    30,    30,    30,   165,   165,   165,   165,   nil,   nil,
   nil,   165,   165,   165,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   165,   165,   165,   165,   165,   165,   165,   165,   165,
   nil,   165,   165,   165,   165,   165,   165,   165,   165,   165,
   165,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   165,   165,   165,
   165,   165,   165,   165,   nil,   165,   165,   165,   165,   165,
   201,   201,   201,   201,   165,   165,   165,   165,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   201,   201,   201,
   201,   201,   201,   201,   201,   201,   nil,   201,   201,   201,
   201,   201,   201,   201,   201,   201,   201,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   201,   nil,   nil,   201,   nil,   nil,
   nil,   nil,   nil,   201,   201,   201,   201,   201,   201,   201,
   nil,   nil,   nil,   201,   201,   201,   202,   202,   202,   202,
   201,   201,   201,   201,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   nil,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   202,   nil,   nil,   202,   nil,   nil,   nil,   nil,   nil,   202,
   202,   202,   202,   202,   202,   202,   nil,   nil,   nil,   202,
   202,   202,   236,   236,   236,   236,   202,   202,   202,   202,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   236,
   236,   236,   236,   236,   236,   236,   236,   236,   nil,   236,
   236,   236,   236,   236,   236,   236,   236,   236,   236,   281,
   nil,   nil,   281,   nil,   281,   nil,   281,   nil,   nil,   281,
   281,   281,   nil,   nil,   nil,   236,   236,   236,   236,   236,
   236,   236,   nil,   nil,   nil,   236,   236,   236,   nil,   nil,
   281,   nil,   236,   236,   236,   236,   nil,   nil,   nil,   281,
   281,   288,   nil,   281,   288,   nil,   288,   nil,   288,   nil,
   nil,   288,   288,   288,   nil,   290,   nil,   nil,   290,   281,
   290,   nil,   290,   nil,   nil,   290,   290,   290,   nil,   nil,
   nil,   nil,   288,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   288,   288,   nil,   nil,   288,   290,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   290,   290,   nil,     2,   290,
   nil,   288,   nil,   nil,   nil,   nil,   nil,   nil,     2,     2,
     2,   nil,     2,   nil,     2,   290,     2,   nil,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   nil,   nil,    25,   nil,   nil,   nil,   nil,     2,
   nil,   nil,   nil,     2,    25,    25,    25,   nil,    25,   nil,
    25,    25,    25,   nil,    25,    25,    25,    25,    25,    25,
    25,    25,    25,    25,    25,    25,    25,    25,   nil,   nil,
    26,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,    25,
    26,    26,    26,   nil,    26,   nil,    26,   nil,    26,   nil,
    26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
    26,    26,    26,    26,   nil,   nil,    40,   nil,   nil,   nil,
   nil,    26,   nil,   nil,   nil,    26,    40,    40,    40,   nil,
    40,   nil,    40,   nil,    40,   nil,    40,    40,    40,    40,
    40,    40,    40,    40,    40,    40,    40,    40,    40,    40,
   nil,   nil,    41,   nil,   nil,   nil,   nil,    40,   nil,   nil,
   nil,    40,    41,    41,    41,   nil,    41,   nil,    41,   nil,
    41,   nil,    41,    41,    41,    41,    41,    41,    41,    41,
    41,    41,    41,    41,    41,    41,   nil,   nil,    43,   nil,
   nil,   nil,   nil,    41,   nil,   nil,   nil,    41,    43,    43,
    43,   nil,    43,   nil,    43,   nil,    43,   nil,    43,    43,
    43,    43,    43,    43,    43,    43,    43,    43,    43,    43,
    43,    43,   nil,   nil,    53,   nil,   nil,   nil,   nil,    43,
   nil,   nil,   nil,    43,    53,    53,    53,   nil,    53,   nil,
    53,   nil,    53,   nil,    53,    53,    53,    53,    53,    53,
    53,    53,    53,    53,    53,    53,    53,    53,   nil,   nil,
    92,   nil,   nil,   nil,   nil,    53,   nil,   nil,   nil,    53,
    92,    92,    92,   nil,    92,   nil,    92,   nil,    92,   nil,
    92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
    92,    92,    92,    92,   nil,   nil,   125,   nil,   nil,   nil,
   nil,    92,   nil,   nil,   nil,    92,   125,   125,   125,   nil,
   125,   nil,   125,   125,   125,   nil,   125,   125,   125,   125,
   125,   125,   125,   125,   125,   125,   125,   125,   125,   125,
   nil,   nil,   157,   nil,   nil,   nil,   nil,   125,   nil,   nil,
   nil,   125,   157,   157,   157,   nil,   157,   nil,   157,   nil,
   157,   nil,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   nil,   nil,   158,   nil,
   nil,   nil,   nil,   157,   nil,   nil,   nil,   157,   158,   158,
   158,   nil,   158,   nil,   158,   nil,   158,   nil,   158,   158,
   158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
   158,   158,   nil,   nil,   159,   nil,   nil,   nil,   nil,   158,
   nil,   nil,   nil,   158,   159,   159,   159,   nil,   159,   nil,
   159,   nil,   159,   nil,   159,   159,   159,   159,   159,   159,
   159,   159,   159,   159,   159,   159,   159,   159,   nil,   nil,
   166,   nil,   nil,   nil,   nil,   159,   nil,   nil,   nil,   159,
   166,   166,   166,   nil,   166,   nil,   166,   nil,   166,   nil,
   166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
   166,   166,   166,   166,   nil,   nil,   167,   nil,   nil,   nil,
   nil,   166,   nil,   nil,   nil,   166,   167,   167,   167,   nil,
   167,   nil,   167,   nil,   167,   nil,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
   nil,   nil,   168,   nil,   nil,   nil,   nil,   167,   nil,   nil,
   nil,   167,   168,   168,   168,   nil,   168,   nil,   168,   nil,
   168,   nil,   168,   168,   168,   168,   168,   168,   168,   168,
   168,   168,   168,   168,   168,   168,   nil,   nil,   170,   nil,
   nil,   nil,   nil,   168,   nil,   nil,   nil,   168,   170,   170,
   170,   nil,   170,   nil,   170,   nil,   170,   nil,   170,   170,
   170,   170,   170,   170,   170,   170,   170,   170,   170,   170,
   170,   170,   nil,   nil,   171,   nil,   nil,   nil,   nil,   170,
   nil,   nil,   nil,   170,   171,   171,   171,   nil,   171,   nil,
   171,   nil,   171,   nil,   171,   171,   171,   171,   171,   171,
   171,   171,   171,   171,   171,   171,   171,   171,   nil,   nil,
   172,   nil,   nil,   nil,   nil,   171,   nil,   nil,   nil,   171,
   172,   172,   172,   nil,   172,   nil,   172,   nil,   172,   nil,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   nil,   nil,   178,   nil,   nil,   nil,
   nil,   172,   nil,   nil,   nil,   172,   178,   178,   178,   nil,
   178,   nil,   178,   nil,   178,   nil,   178,   178,   178,   178,
   178,   178,   178,   178,   178,   178,   178,   178,   178,   178,
   nil,   nil,   179,   nil,   nil,   nil,   nil,   178,   nil,   nil,
   nil,   178,   179,   179,   179,   nil,   179,   nil,   179,   nil,
   179,   nil,   179,   179,   179,   179,   179,   179,   179,   179,
   179,   179,   179,   179,   179,   179,   nil,   nil,   181,   nil,
   nil,   nil,   nil,   179,   nil,   nil,   nil,   179,   181,   181,
   181,   nil,   181,   nil,   181,   nil,   181,   nil,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   nil,   nil,   186,   nil,   nil,   nil,   nil,   181,
   nil,   nil,   nil,   181,   186,   186,   186,   nil,   186,   nil,
   186,   nil,   186,   nil,   186,   186,   186,   186,   186,   186,
   186,   186,   186,   186,   186,   186,   186,   186,   nil,   nil,
   204,   nil,   nil,   nil,   nil,   186,   nil,   nil,   nil,   186,
   204,   204,   204,   nil,   204,   nil,   204,   nil,   204,   nil,
   204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
   204,   204,   204,   204,   nil,   nil,   211,   nil,   nil,   nil,
   nil,   204,   nil,   nil,   nil,   204,   211,   211,   211,   nil,
   211,   nil,   211,   nil,   211,   nil,   211,   211,   211,   211,
   211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
   nil,   nil,   230,   nil,   nil,   nil,   nil,   211,   nil,   nil,
   nil,   211,   230,   230,   230,   nil,   230,   nil,   230,   nil,
   230,   nil,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   nil,   nil,   253,   nil,
   nil,   nil,   nil,   230,   nil,   nil,   nil,   230,   253,   253,
   253,   nil,   253,   nil,   253,   nil,   253,   nil,   253,   253,
   253,   253,   253,   253,   253,   253,   253,   253,   253,   253,
   253,   253,   nil,   nil,   292,   nil,   nil,   nil,   nil,   253,
   nil,   nil,   nil,   253,   292,   292,   292,   nil,   292,   nil,
   292,   nil,   292,   nil,   292,   292,   292,   292,   292,   292,
   292,   292,   292,   292,   292,   292,   292,   292,   nil,   nil,
   315,   nil,   nil,   nil,   nil,   292,   nil,   nil,   nil,   292,
   315,   315,   315,   nil,   315,   nil,   315,   nil,   315,   nil,
   315,   315,   315,   315,   315,   315,   315,   315,   315,   315,
   315,   315,   315,   315,   nil,   nil,   330,   nil,   nil,   nil,
   nil,   315,   nil,   nil,   nil,   315,   330,   330,   330,   nil,
   330,   nil,   330,   nil,   330,   nil,   330,   330,   330,   330,
   330,   330,   330,   330,   330,   330,   330,   330,   330,   330,
   nil,   nil,   331,   nil,   nil,   nil,   nil,   330,   nil,   nil,
   nil,   330,   331,   331,   331,   nil,   331,   nil,   331,   nil,
   331,   nil,   331,   331,   331,   331,   331,   331,   331,   331,
   331,   331,   331,   331,   331,   331,   nil,   nil,   368,   nil,
   nil,   nil,   nil,   331,   nil,   nil,   nil,   331,   368,   368,
   368,   nil,   368,   nil,   368,   nil,   368,   nil,   368,   368,
   368,   368,   368,   368,   368,   368,   368,   368,   368,   368,
   368,   368,   nil,   nil,   375,   nil,   nil,   nil,   nil,   368,
   nil,   nil,   nil,   368,   375,   375,   375,   nil,   375,   nil,
   375,   nil,   375,   nil,   375,   375,   375,   375,   375,   375,
   375,   375,   375,   375,   375,   375,   375,   375,   nil,   nil,
   377,   nil,   nil,   nil,   nil,   375,   nil,   nil,   nil,   375,
   377,   377,   377,   nil,   377,   nil,   377,   nil,   377,   nil,
   377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
   377,   377,   377,   377,   nil,   nil,   379,   nil,   nil,   nil,
   nil,   377,   nil,   nil,   nil,   377,   379,   379,   379,   nil,
   379,   nil,   379,   nil,   379,   nil,   379,   379,   379,   379,
   379,   379,   379,   379,   379,   379,   379,   379,   379,   379,
   nil,   nil,   381,   nil,   nil,   nil,   nil,   379,   nil,   nil,
   nil,   379,   381,   381,   381,   nil,   381,   nil,   381,   nil,
   381,   nil,   381,   381,   381,   381,   381,   381,   381,   381,
   381,   381,   381,   381,   381,   381,   nil,   nil,   382,   nil,
   nil,   nil,   nil,   381,   nil,   nil,   nil,   381,   382,   382,
   382,   nil,   382,   nil,   382,   nil,   382,   nil,   382,   382,
   382,   382,   382,   382,   382,   382,   382,   382,   382,   382,
   382,   382,   nil,   nil,   383,   nil,   nil,   nil,   nil,   382,
   nil,   nil,   nil,   382,   383,   383,   383,   nil,   383,   nil,
   383,   nil,   383,   nil,   383,   383,   383,   383,   383,   383,
   383,   383,   383,   383,   383,   383,   383,   383,   nil,   nil,
   406,   nil,   nil,   nil,   nil,   383,   nil,   nil,   nil,   383,
   406,   406,   406,   nil,   406,   nil,   406,   nil,   406,   nil,
   406,   406,   406,   406,   406,   406,   406,   406,   406,   406,
   406,   406,   406,   406,   nil,   nil,   409,   nil,   nil,   nil,
   nil,   406,   nil,   nil,   nil,   406,   409,   409,   409,   nil,
   409,   nil,   409,   nil,   409,   nil,   409,   409,   409,   409,
   409,   409,   409,   409,   409,   409,   409,   409,   409,   409,
   nil,   nil,   410,   nil,   nil,   nil,   nil,   409,   nil,   nil,
   nil,   409,   410,   410,   410,   nil,   410,   nil,   410,   nil,
   410,   nil,   410,   410,   410,   410,   410,   410,   410,   410,
   410,   410,   410,   410,   410,   410,   299,   nil,   nil,   299,
   nil,   299,   nil,   410,   299,   nil,   nil,   410,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   299,   nil,   299,   299,   299,   299,   299,   nil,   nil,
   nil,   299 ]

racc_action_pointer = [
    62,    34,  1663,   nil,   nil,    38,    76,    34,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   146,  1699,  1735,   151,    38,   nil,
  1252,   249,   167,   nil,   169,    98,   185,   nil,   nil,   nil,
  1771,  1807,   nil,  1843,    52,   nil,   171,   115,    -3,   716,
   nil,    -4,   nil,  1879,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   209,   nil,   217,
   230,   270,  1915,   308,   319,   320,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   352,     3,   325,    19,   326,   nil,    42,
   373,   327,   nil,     5,   355,  1951,   nil,   358,   391,   374,
   350,   351,   358,   359,   361,   366,   367,   368,   369,   370,
   371,   399,   374,    -3,   nil,   375,   374,   nil,   375,   nil,
   376,   nil,   nil,   386,   397,   nil,   793,  1987,  2023,  2059,
    75,   422,   395,   398,   427,  1326,  2095,  2131,  2167,   133,
  2203,  2239,  2275,   nil,   nil,   nil,   nil,     1,  2311,  2347,
   nil,  2383,   nil,     8,   nil,   nil,  2419,   nil,   156,   nil,
   404,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   870,   947,
  1024,  1392,  1458,     1,  2455,     5,    10,    14,   432,  1101,
    79,  2491,   nil,   nil,   162,   168,   185,   187,   195,   205,
     5,    10,    20,   400,   455,   210,   212,   214,   nil,   471,
  2527,   nil,   nil,   nil,   427,   nil,  1524,   nil,   nil,   nil,
    20,   nil,   nil,   nil,   nil,   455,   452,   431,   463,   465,
   164,   466,   482,  2563,   nil,   nil,   437,  1178,   nil,   439,
   nil,   431,   412,   448,    24,   nil,   nil,   236,   nil,   nil,
    26,    18,   nil,   212,   nil,   nil,    27,   447,   nil,   474,
    -2,  1567,   475,   nil,   418,   497,   nil,   nil,  1609,   453,
  1623,    28,  2599,   nil,   nil,   nil,   nil,   nil,   -22,  3070,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   456,   457,   445,  2635,   nil,   nil,   nil,   nil,
   nil,    66,    30,    18,    79,   480,   491,   492,    31,    32,
  2671,  2707,   514,   109,   nil,   509,   nil,   491,   nil,   nil,
   243,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   477,   159,   478,   239,
   319,   399,   516,   517,   249,   265,   508,   nil,  2743,   282,
   nil,   nil,   479,   nil,   nil,  2779,   535,  2815,   536,  2851,
   537,  2887,  2923,  2959,   132,   559,   505,   506,   533,   275,
   526,    83,   283,   527,   285,   528,   133,   146,   287,   nil,
   515,   nil,   530,   nil,   nil,   518,  2995,   nil,   558,  3031,
  3067,   nil,   nil,   nil,   531,   nil,   nil,   639,   290,   nil,
   292,   294,   521,   nil,   nil ]

racc_action_default = [
  -251,  -251,  -245,    -6,   -15,  -251,    -4,  -158,  -161,  -162,
  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,
  -173,  -174,  -175,  -176,  -177,  -245,  -245,  -251,   -80,  -185,
  -251,  -251,  -246,  -248,   -16,    -4,  -148,   425,    -1,    -5,
  -245,  -245,  -184,  -245,  -186,  -179,  -250,  -251,  -245,  -245,
  -183,  -251,  -205,  -245,  -105,  -106,  -107,  -108,  -109,  -110,
  -111,  -112,  -113,  -114,  -115,  -116,  -117,  -118,  -119,  -120,
  -121,  -122,  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -130,
  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -250,  -189,  -251,
  -251,  -251,  -245,  -251,  -251,  -251,  -200,  -201,  -202,  -203,
  -238,  -239,  -240,  -241,  -247,    -2,    -7,    -8,    -9,   -10,
   -11,   -12,   -13,   -16,  -251,  -251,  -251,  -251,    -3,   -80,
  -251,  -159,  -160,  -251,  -251,  -245,  -181,  -251,  -251,  -251,
  -171,  -161,  -165,  -172,  -173,  -162,  -163,  -166,  -167,  -170,
  -164,  -116,  -168,  -232,  -198,  -251,  -209,  -210,  -212,  -213,
  -215,  -216,  -219,  -222,  -224,  -225,  -245,  -245,  -245,  -245,
  -251,  -251,  -251,  -207,  -251,  -249,  -245,  -245,  -245,  -194,
  -245,  -245,  -245,   -17,   -14,   -14,   -14,  -245,  -245,  -245,
  -243,  -245,   -79,  -251,  -150,  -178,  -245,  -180,  -187,  -182,
   -81,  -226,  -233,  -234,  -235,  -236,  -237,  -199,  -245,  -245,
  -245,  -220,  -220,  -232,  -245,  -232,  -232,  -232,  -251,  -245,
  -251,  -245,  -188,  -190,  -191,  -192,  -193,  -195,  -196,  -197,
  -245,  -245,  -245,  -251,  -251,  -155,  -156,  -157,  -149,  -251,
  -245,  -208,  -216,  -211,  -218,  -214,  -251,  -221,  -223,  -227,
  -232,  -228,  -229,  -231,   -82,  -251,  -251,  -204,  -138,  -138,
  -251,  -138,  -251,  -245,  -244,  -151,  -206,  -245,  -230,  -251,
   -83,   -19,  -146,   -24,  -245,   -57,  -242,  -154,  -217,   -30,
  -245,  -251,  -140,  -143,  -147,   -30,  -245,   -30,   -26,   -29,
   -16,   -16,   -20,  -139,  -146,  -251,  -144,  -145,   -16,   -25,
   -16,  -245,  -245,   -56,   -58,   -59,   -60,   -61,   -71,   -71,
   -18,   -31,   -32,   -33,   -34,   -35,   -36,   -37,   -38,   -39,
   -40,   -41,  -251,  -251,  -251,  -245,  -141,  -142,   -22,   -23,
   -27,  -251,  -245,   -68,  -251,   -42,   -42,   -42,  -245,  -245,
  -245,  -245,  -251,  -251,   -28,   -62,   -69,  -251,   -72,   -86,
   -87,   -90,   -91,   -92,   -93,   -94,   -95,   -96,   -97,   -98,
   -99,  -100,  -101,  -102,  -103,  -104,  -130,  -251,  -251,  -251,
  -251,  -251,   -64,   -66,   -53,   -54,  -251,   -21,  -245,   -73,
   -88,   -89,  -251,  -152,   -43,  -245,   -50,  -245,   -50,  -245,
   -50,  -245,  -245,  -245,  -251,  -251,  -251,  -251,  -251,   -44,
  -251,  -251,   -46,  -251,   -48,  -251,  -251,  -251,   -55,   -63,
   -15,   -84,  -251,   -74,   -75,  -251,  -245,   -51,  -251,  -245,
  -245,   -65,   -67,   -70,   -76,   -77,   -85,  -251,   -45,   -52,
   -47,   -49,   -15,  -153,   -78 ]

racc_goto_table = [
     6,   114,   116,    93,    46,   163,    88,    92,   127,   191,
    50,   129,   204,   124,   208,   357,   128,   279,   232,   413,
   235,   272,   123,   277,    47,   234,   234,    38,   281,   279,
   261,   263,     1,   265,   288,   289,   290,    34,   121,   122,
    35,   424,   106,   316,   279,   237,   238,   143,   373,   269,
   376,   378,   380,   275,   164,   105,   118,   390,   320,   393,
   295,   395,   296,   388,   246,   220,   221,   222,   297,   239,
   251,   241,   242,   243,   280,   335,   402,   268,   294,   337,
   173,   362,   363,   234,   359,   360,   361,   385,   400,   119,
   169,   162,   204,   271,   285,   183,   223,    87,   233,   100,
   nil,   182,   nil,   nil,   nil,   nil,   258,   nil,   423,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   188,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    93,   nil,
   nil,   213,    92,   nil,   nil,   224,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   203,   205,   206,   207,   nil,   nil,
   231,   nil,   nil,   247,   214,   215,   216,   nil,   217,   218,
   219,   245,   nil,   nil,   nil,   nil,   225,   226,   nil,   227,
   248,   249,   256,   nil,   188,   nil,   nil,   nil,   128,   250,
   252,   nil,   nil,   nil,   nil,   nil,   143,   143,   143,   nil,
   nil,   nil,   240,   nil,   nil,   nil,   nil,   143,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   282,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   128,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   298,   nil,   116,
   nil,   267,   nil,   nil,   nil,   143,   116,   nil,   116,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   321,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   333,   nil,   nil,   355,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   364,   365,
   355,   nil,   355,   355,   355,   nil,   375,   377,   379,   nil,
   nil,   nil,   nil,   nil,   nil,   355,   nil,   384,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   355,   nil,
   396,   397,   401,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   389,   nil,   392,   nil,   394,   nil,   nil,
   nil,   398,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   355,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   418,   nil,   nil,   420,   421 ]

racc_goto_check = [
     2,    15,    22,    54,    20,    61,    65,    35,    16,    77,
    47,    49,    66,    62,    51,    36,    22,    25,    72,    45,
    72,    56,    20,    23,     2,    67,    67,     3,    19,    25,
    17,    17,     1,    17,    19,    23,    19,     4,     2,     2,
     5,    45,     6,    56,    25,    73,    73,     2,    36,    18,
    36,    36,    36,    21,    62,     3,     3,    37,    24,    37,
    27,    37,    28,    36,    51,    13,    13,    13,    33,    77,
    38,    77,    77,    77,    39,    25,    36,    72,    40,    41,
    15,    25,    25,    67,    34,    34,    34,    43,    44,    46,
     2,    50,    66,    55,    58,    59,    60,    64,    68,    78,
   nil,    47,   nil,   nil,   nil,   nil,    77,   nil,    36,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    54,   nil,
   nil,    65,    35,   nil,   nil,    22,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,     2,     2,     2,   nil,   nil,
    49,   nil,   nil,    61,     2,     2,     2,   nil,     2,     2,
     2,    49,   nil,   nil,   nil,   nil,     2,     2,   nil,     2,
    16,    16,    61,   nil,     2,   nil,   nil,   nil,    22,    22,
    22,   nil,   nil,   nil,   nil,   nil,     2,     2,     2,   nil,
   nil,   nil,     2,   nil,   nil,   nil,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    16,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,    22,
   nil,     2,   nil,   nil,   nil,     2,    22,   nil,    22,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    20,   nil,   nil,    54,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,     2,
    54,   nil,    54,    54,    54,   nil,    35,    35,    35,   nil,
   nil,   nil,   nil,   nil,   nil,    54,   nil,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    54,   nil,
    20,    20,    35,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,     2,   nil,     2,   nil,   nil,
   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    54,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    32,    -2,    21,    34,    36,     8,   nil,   nil,   nil,
   nil,   nil,   nil,  -109,   nil,   -33,   -40,  -218,  -212,  -241,
   -21,  -210,   -32,  -241,  -233,  -247,   nil,  -220,  -218,   nil,
   nil,   nil,   nil,  -212,  -241,   -23,  -309,  -319,  -152,  -191,
  -202,  -244,   nil,  -282,  -297,  -381,    53,   -18,   nil,   -38,
    40,  -146,   nil,   nil,   -27,  -169,  -241,   nil,  -179,   -25,
   -81,   -48,   -33,   nil,    67,   -24,  -144,  -174,  -101,   nil,
   nil,   nil,  -180,  -156,   nil,   nil,   nil,  -134,    68 ]

racc_goto_default = [
   nil,   nil,    44,   nil,   nil,   414,   311,   107,   108,   109,
   110,   111,   112,   nil,    36,   299,   115,   nil,   nil,   nil,
   nil,   nil,    31,   nil,   278,    24,   301,   302,   303,   304,
   305,   306,   307,   310,   nil,   144,   nil,   nil,   nil,   nil,
   nil,   nil,   323,   nil,   nil,   nil,   nil,   nil,    51,   nil,
   nil,    52,   339,   340,   145,   nil,   nil,   273,   nil,   nil,
   nil,     7,   nil,    29,   nil,   nil,   158,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 84, :_reduce_1,
  3, 84, :_reduce_2,
  3, 84, :_reduce_3,
  0, 86, :_reduce_none,
  1, 86, :_reduce_none,
  0, 87, :_reduce_6,
  2, 87, :_reduce_7,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  0, 96, :_reduce_14,
  0, 97, :_reduce_15,
  0, 98, :_reduce_16,
  2, 98, :_reduce_17,
  8, 95, :_reduce_18,
  0, 101, :_reduce_19,
  2, 101, :_reduce_20,
  5, 101, :_reduce_21,
  8, 94, :_reduce_22,
  8, 94, :_reduce_23,
  0, 104, :_reduce_24,
  2, 104, :_reduce_25,
  1, 106, :_reduce_26,
  3, 106, :_reduce_27,
  4, 107, :_reduce_28,
  1, 107, :_reduce_29,
  0, 102, :_reduce_30,
  2, 102, :_reduce_31,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_38,
  1, 109, :_reduce_39,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  0, 117, :_reduce_42,
  2, 117, :_reduce_43,
  5, 115, :_reduce_44,
  7, 115, :_reduce_45,
  5, 115, :_reduce_46,
  7, 115, :_reduce_47,
  5, 115, :_reduce_48,
  7, 115, :_reduce_49,
  0, 120, :_reduce_50,
  2, 120, :_reduce_51,
  3, 120, :_reduce_52,
  3, 114, :_reduce_53,
  3, 114, :_reduce_54,
  5, 114, :_reduce_55,
  7, 93, :_reduce_56,
  0, 122, :_reduce_57,
  2, 122, :_reduce_58,
  1, 123, :_reduce_59,
  1, 123, :_reduce_60,
  1, 123, :_reduce_none,
  3, 111, :_reduce_62,
  6, 111, :_reduce_63,
  3, 112, :_reduce_64,
  6, 112, :_reduce_65,
  3, 113, :_reduce_66,
  6, 113, :_reduce_67,
  0, 124, :_reduce_68,
  1, 124, :_reduce_69,
  7, 110, :_reduce_70,
  0, 125, :_reduce_none,
  2, 125, :_reduce_72,
  0, 126, :_reduce_73,
  2, 126, :_reduce_74,
  2, 126, :_reduce_75,
  1, 128, :_reduce_76,
  1, 128, :_reduce_77,
  3, 128, :_reduce_78,
  3, 88, :_reduce_79,
  0, 131, :_reduce_80,
  3, 131, :_reduce_81,
  3, 133, :_reduce_82,
  4, 133, :_reduce_83,
  1, 127, :_reduce_84,
  2, 127, :_reduce_85,
  1, 119, :_reduce_86,
  1, 119, :_reduce_87,
  2, 119, :_reduce_88,
  2, 119, :_reduce_89,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  0, 100, :_reduce_138,
  3, 100, :_reduce_139,
  1, 138, :_reduce_140,
  3, 138, :_reduce_141,
  3, 139, :_reduce_142,
  0, 141, :_reduce_143,
  1, 141, :_reduce_144,
  1, 141, :_reduce_145,
  0, 140, :_reduce_146,
  1, 140, :_reduce_147,
  0, 129, :_reduce_148,
  3, 129, :_reduce_149,
  1, 142, :_reduce_150,
  3, 142, :_reduce_151,
  4, 116, :_reduce_152,
  8, 116, :_reduce_153,
  5, 90, :_reduce_154,
  3, 91, :_reduce_155,
  3, 91, :_reduce_156,
  3, 92, :_reduce_157,
  1, 85, :_reduce_none,
  3, 85, :_reduce_159,
  3, 85, :_reduce_160,
  1, 144, :_reduce_161,
  1, 144, :_reduce_162,
  1, 144, :_reduce_163,
  1, 144, :_reduce_164,
  1, 144, :_reduce_165,
  1, 144, :_reduce_166,
  1, 144, :_reduce_167,
  1, 144, :_reduce_168,
  1, 144, :_reduce_169,
  1, 144, :_reduce_170,
  1, 144, :_reduce_171,
  1, 144, :_reduce_172,
  1, 144, :_reduce_173,
  1, 144, :_reduce_174,
  1, 144, :_reduce_175,
  1, 144, :_reduce_176,
  1, 144, :_reduce_177,
  4, 144, :_reduce_178,
  2, 144, :_reduce_179,
  4, 144, :_reduce_180,
  3, 144, :_reduce_181,
  4, 144, :_reduce_182,
  2, 144, :_reduce_183,
  2, 144, :_reduce_184,
  1, 144, :_reduce_none,
  1, 103, :_reduce_186,
  3, 103, :_reduce_187,
  4, 146, :_reduce_188,
  1, 147, :_reduce_189,
  3, 147, :_reduce_190,
  3, 148, :_reduce_191,
  3, 148, :_reduce_192,
  3, 148, :_reduce_193,
  2, 148, :_reduce_194,
  3, 148, :_reduce_195,
  3, 148, :_reduce_196,
  3, 148, :_reduce_197,
  1, 149, :_reduce_none,
  2, 149, :_reduce_199,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  4, 130, :_reduce_204,
  1, 130, :_reduce_205,
  5, 134, :_reduce_206,
  2, 134, :_reduce_207,
  3, 132, :_reduce_208,
  1, 132, :_reduce_209,
  1, 132, :_reduce_none,
  3, 151, :_reduce_211,
  1, 151, :_reduce_212,
  1, 151, :_reduce_none,
  3, 153, :_reduce_214,
  1, 153, :_reduce_215,
  1, 153, :_reduce_none,
  3, 155, :_reduce_217,
  1, 155, :_reduce_218,
  1, 155, :_reduce_none,
  0, 156, :_reduce_220,
  3, 156, :_reduce_221,
  1, 156, :_reduce_222,
  3, 156, :_reduce_223,
  1, 156, :_reduce_224,
  1, 156, :_reduce_225,
  2, 150, :_reduce_226,
  3, 152, :_reduce_227,
  3, 154, :_reduce_228,
  3, 157, :_reduce_229,
  4, 158, :_reduce_230,
  3, 159, :_reduce_231,
  0, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  2, 108, :_reduce_238,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  2, 121, :_reduce_242,
  2, 99, :_reduce_243,
  2, 143, :_reduce_244,
  0, 105, :_reduce_245,
  1, 105, :_reduce_246,
  2, 105, :_reduce_247,
  1, 105, :_reduce_248,
  1, 145, :_reduce_none,
  0, 145, :_reduce_none ]

racc_reduce_n = 251

racc_shift_n = 425

racc_token_table = {
  false => 0,
  :error => 1,
  :tUIDENT => 2,
  :tLIDENT => 3,
  :tUNDERSCOREIDENT => 4,
  :tNAMESPACE => 5,
  :tINTERFACEIDENT => 6,
  :tGLOBALIDENT => 7,
  :tLKEYWORD => 8,
  :tUKEYWORD => 9,
  :tLKEYWORD_Q_E => 10,
  :tUKEYWORD_Q_E => 11,
  :tIVAR => 12,
  :tCLASSVAR => 13,
  :tANNOTATION => 14,
  :tSTRING => 15,
  :tSYMBOL => 16,
  :tINTEGER => 17,
  :tWRITE_ATTR => 18,
  :kLPAREN => 19,
  :kRPAREN => 20,
  :kLBRACKET => 21,
  :kRBRACKET => 22,
  :kLBRACE => 23,
  :kRBRACE => 24,
  :kVOID => 25,
  :kNIL => 26,
  :kTRUE => 27,
  :kFALSE => 28,
  :kANY => 29,
  :kUNTYPED => 30,
  :kTOP => 31,
  :kBOT => 32,
  :kSELF => 33,
  :kSELFQ => 34,
  :kINSTANCE => 35,
  :kCLASS => 36,
  :kBOOL => 37,
  :kSINGLETON => 38,
  :kTYPE => 39,
  :kDEF => 40,
  :kMODULE => 41,
  :kPRIVATE => 42,
  :kPUBLIC => 43,
  :kALIAS => 44,
  :kCOLON => 45,
  :kCOLON2 => 46,
  :kCOMMA => 47,
  :kBAR => 48,
  :kAMP => 49,
  :kHAT => 50,
  :kARROW => 51,
  :kQUESTION => 52,
  :kEXCLAMATION => 53,
  :kSTAR => 54,
  :kSTAR2 => 55,
  :kFATARROW => 56,
  :kEQ => 57,
  :kDOT => 58,
  :kDOT3 => 59,
  :kLT => 60,
  :kINTERFACE => 61,
  :kEND => 62,
  :kINCLUDE => 63,
  :kEXTEND => 64,
  :kATTRREADER => 65,
  :kATTRWRITER => 66,
  :kATTRACCESSOR => 67,
  :tOPERATOR => 68,
  :tQUOTEDMETHOD => 69,
  :tQUOTEDIDENT => 70,
  :kPREPEND => 71,
  :kEXTENSION => 72,
  :kINCOMPATIBLE => 73,
  :type_TYPE => 74,
  :type_SIGNATURE => 75,
  :type_METHODTYPE => 76,
  :tEOF => 77,
  :kOUT => 78,
  :kIN => 79,
  :kUNCHECKED => 80,
  :kOVERLOAD => 81,
  :tPARAMNAME => 82 }

racc_nt_base = 83

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "tUIDENT",
  "tLIDENT",
  "tUNDERSCOREIDENT",
  "tNAMESPACE",
  "tINTERFACEIDENT",
  "tGLOBALIDENT",
  "tLKEYWORD",
  "tUKEYWORD",
  "tLKEYWORD_Q_E",
  "tUKEYWORD_Q_E",
  "tIVAR",
  "tCLASSVAR",
  "tANNOTATION",
  "tSTRING",
  "tSYMBOL",
  "tINTEGER",
  "tWRITE_ATTR",
  "kLPAREN",
  "kRPAREN",
  "kLBRACKET",
  "kRBRACKET",
  "kLBRACE",
  "kRBRACE",
  "kVOID",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kANY",
  "kUNTYPED",
  "kTOP",
  "kBOT",
  "kSELF",
  "kSELFQ",
  "kINSTANCE",
  "kCLASS",
  "kBOOL",
  "kSINGLETON",
  "kTYPE",
  "kDEF",
  "kMODULE",
  "kPRIVATE",
  "kPUBLIC",
  "kALIAS",
  "kCOLON",
  "kCOLON2",
  "kCOMMA",
  "kBAR",
  "kAMP",
  "kHAT",
  "kARROW",
  "kQUESTION",
  "kEXCLAMATION",
  "kSTAR",
  "kSTAR2",
  "kFATARROW",
  "kEQ",
  "kDOT",
  "kDOT3",
  "kLT",
  "kINTERFACE",
  "kEND",
  "kINCLUDE",
  "kEXTEND",
  "kATTRREADER",
  "kATTRWRITER",
  "kATTRACCESSOR",
  "tOPERATOR",
  "tQUOTEDMETHOD",
  "tQUOTEDIDENT",
  "kPREPEND",
  "kEXTENSION",
  "kINCOMPATIBLE",
  "type_TYPE",
  "type_SIGNATURE",
  "type_METHODTYPE",
  "tEOF",
  "kOUT",
  "kIN",
  "kUNCHECKED",
  "kOVERLOAD",
  "tPARAMNAME",
  "$start",
  "target",
  "type",
  "eof",
  "signatures",
  "method_type",
  "signature",
  "type_decl",
  "const_decl",
  "global_decl",
  "interface_decl",
  "module_decl",
  "class_decl",
  "start_new_scope",
  "start_merged_scope",
  "annotations",
  "class_name",
  "module_type_params",
  "super_class",
  "class_members",
  "type_list",
  "colon_module_self_types",
  "namespace",
  "module_self_types",
  "module_self_type",
  "qualified_name",
  "class_member",
  "method_member",
  "include_member",
  "extend_member",
  "prepend_member",
  "var_type_member",
  "attribute_member",
  "alias_member",
  "attribute_kind",
  "keyword",
  "method_name",
  "attr_var_opt",
  "interface_name",
  "interface_members",
  "interface_member",
  "overload",
  "attributes",
  "method_kind",
  "def_name",
  "method_types",
  "type_params",
  "proc_type",
  "params_opt",
  "params",
  "block",
  "simple_function_type",
  "pMethodName1",
  "method_name0",
  "identifier_keywords",
  "module_type_params0",
  "module_type_param",
  "type_param_check",
  "type_param_variance",
  "type_params0",
  "type_alias_name",
  "simple_type",
  "comma_opt",
  "record_type",
  "record_fields",
  "record_field",
  "keyword_name",
  "required_positional",
  "optional_positional_params",
  "optional_positional",
  "rest_positional_param",
  "rest_positional",
  "trailing_positional_params",
  "keyword_params",
  "required_keyword",
  "optional_keyword",
  "rest_keyword",
  "var_name_opt",
  "simple_name" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_1(val, _values, result)
            result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_2(val, _values, result)
            result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_3(val, _values, result)
            result = val[1]

    result
  end
.,.,

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.y', 41)
  def _reduce_6(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_7(val, _values, result)
            result = val[0].push(val[1])

    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_14(val, _values, result)
     start_new_variables_scope
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_15(val, _values, result)
     start_merged_variables_scope
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_16(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_17(val, _values, result)
            result = val[1].unshift(Annotation.new(string: value(val[0]), location: location(token: val[0])))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_18(val, _values, result)
            reset_variable_scope

        location = location(start_token: val[1], end_token: val[7])
        location = location.with_children(
          required: {
            keyword: location(token: val[1]),
            name: val[3].location,
            end: location(token: val[7])
          },
          optional: {
            type_params: val[4]&.location,
            lt: val[5]&.location
          }
        )
        result = Declarations::Class.new(
          name: val[3].value,
          type_params: val[4]&.value || Declarations::ModuleTypeParams.empty,
          super_class: val[5]&.value,
          members: val[6],
          annotations: val[0],
          location: location,
          comment: nil
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_19(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 93)
  def _reduce_20(val, _values, result)
            loc = val[1].location.with_children(
          required: { name: val[1].range },
          optional: { args: nil }
        )
        result =
          LocatedValue.new(
            value: Declarations::Class::Super.new(name: val[1].value, args: [], location: loc),
            location: location(token: val[0])
          )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 104)
  def _reduce_21(val, _values, result)
            loc = location(start_pos: val[1].location.start_pos, end_token: val[4]).with_children(
          required: { name: val[1].range },
          optional: { args: tokenizer.start_pos(val[2])...tokenizer.end_pos(val[4]) }
        )
        result =
          LocatedValue.new(
            value: Declarations::Class::Super.new(name: val[1].value, args: val[3], location: loc),
            location: location(token: val[0])
          )


    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 118)
  def _reduce_22(val, _values, result)
            reset_variable_scope

        colon_loc = val[5].location
        self_loc = val[5].value.yield_self do |params|
          case params.size
          when 0
            nil
          when 1
            params[0].location
          else
            params.first.location + params.last.location
          end
        end

        location = location(start_token: val[1], end_token: val[7])
        location = location.with_children(
          required: {
            keyword: location(token: val[1]),
            name: val[3].location,
            end: location(token: val[7])
          },
          optional: {
            type_params: val[4]&.location,
            colon: colon_loc,
            self_types: self_loc
          }
        )
        result = Declarations::Module.new(
          name: val[3].value,
          type_params: val[4]&.value || Declarations::ModuleTypeParams.empty,
          self_types: val[5].value,
          members: val[6],
          annotations: val[0],
          location: location,
          comment: nil
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 156)
  def _reduce_23(val, _values, result)
            reset_variable_scope

        location = location(start_token: val[1], end_token: val[7])
        name_loc, colon_loc = split_kw_loc(location(token: val[4]))
        self_loc = case val[5].size
                   when 0
                     nil
                   when 1
                     val[5][0].location
                   else
                     val[5].first.location + val[5].last.location
                   end
        location = location.with_children(
          required: { keyword: tokenizer.range(val[1]), name: name_loc, end: tokenizer.range(val[7]) },
          optional: { colon: colon_loc, type_params: nil, self_types: self_loc }
        )

        result = Declarations::Module.new(
          name: RBS::TypeName.new(name: value(val[4]).to_sym, namespace: val[3]&.value || RBS::Namespace.empty),
          type_params: Declarations::ModuleTypeParams.empty,
          self_types: val[5],
          members: val[6],
          annotations: val[0],
          location: location,
          comment: nil
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 185)
  def _reduce_24(val, _values, result)
     result = LocatedValue.new(value: [], location: nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 187)
  def _reduce_25(val, _values, result)
            result = LocatedValue.new(value: val[1], location: location(token: val[0]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 192)
  def _reduce_26(val, _values, result)
            result = [val[0]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 195)
  def _reduce_27(val, _values, result)
            result = val[0].push(val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 200)
  def _reduce_28(val, _values, result)
            name = val[0].value
        args = val[2]
        location = location(start_pos: val[0].location.start_pos, end_token: val[3])
        location = location.with_children(
          required: { name: val[0].location },
          optional: { args: tokenizer.start_pos(val[1])...tokenizer.end_pos(val[3]) }
        )

        case
        when name.class?
          result = Declarations::Module::Self.new(name: name, args: args, location: location)
        when name.interface?
          result = Declarations::Module::Self.new(name: name, args: args, location: location)
        else
          raise SemanticsError.new("Module self type should be instance or interface", subject: val[0], location: val[0].location)
        end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 218)
  def _reduce_29(val, _values, result)
            name = val[0].value
        args = []
        location = val[0].location.with_children(
          required: { name: val[0].location },
          optional: { args: nil }
        )

        case
        when name.class?
          result = Declarations::Module::Self.new(name: name, args: args, location: location)
        when name.interface?
          result = Declarations::Module::Self.new(name: name, args: args, location: location)
        else
          raise SemanticsError.new("Module self type should be instance or interface", subject: val[0], location: val[0].location)
        end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 236)
  def _reduce_30(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 238)
  def _reduce_31(val, _values, result)
            result = val[0].push(val[1])

    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.y', 249)
  def _reduce_38(val, _values, result)
            result = Members::Public.new(location: location(token: val[0]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 252)
  def _reduce_39(val, _values, result)
            result = Members::Private.new(location: location(token: val[0]))

    result
  end
.,.,

# reduce 40 omitted

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.y', 258)
  def _reduce_42(val, _values, result)
     result = LocatedValue.new(value: :instance, location: nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 259)
  def _reduce_43(val, _values, result)
     result = LocatedValue.new(value: :singleton, location: location(start_token: val[0], end_token: val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 263)
  def _reduce_44(val, _values, result)
            location = location(start_token: val[1], end_pos: val[4].location.end_pos)
        name_loc, colon_loc = split_kw_loc(location(token: val[3]))
        location = location.with_children(
          required: { keyword: tokenizer.range(val[1]), name: name_loc, colon: colon_loc },
          optional: { ivar: nil, ivar_name: nil, kind: val[2].location }
        )
        result = Members::AttrReader.new(name: value(val[3]),
                                         ivar_name: nil,
                                         type: val[4],
                                         kind: val[2].value,
                                         annotations: val[0],
                                         location: location,
                                         comment: nil)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 278)
  def _reduce_45(val, _values, result)
            location = location(start_token: val[1], end_pos: val[6].location.end_pos)
        ivar_loc = val[4]&.location
        case name_value = val[4]&.value
        when LocatedValue
          ivar_name = name_value.value
          ivar_name_loc = name_value.location
        when false
          ivar_name = false
          ivar_name_loc = nil
        else
          ivar_name = nil
          ivar_loc = nil
        end
        location = location.with_children(
          required: { keyword: tokenizer.range(val[1]), name: val[3].location, colon: tokenizer.range(val[5]) },
          optional: { ivar: ivar_loc, ivar_name: ivar_name_loc, kind: val[2].location }
        )
        result = Members::AttrReader.new(name: val[3].value.to_sym,
                                         ivar_name: ivar_name,
                                         type: val[6],
                                         kind: val[2].value,
                                         annotations: val[0],
                                         location: location,
                                         comment: nil)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 304)
  def _reduce_46(val, _values, result)
            location = location(start_token: val[1], end_pos: val[4].location.end_pos)
        name_loc, colon_loc = split_kw_loc(location(token: val[3]))
        location = location.with_children(
          required: { keyword: tokenizer.range(val[1]), name: name_loc, colon: colon_loc },
          optional: { ivar: nil, ivar_name: nil, kind: val[2].location }
        )
        result = Members::AttrWriter.new(name: value(val[3]),
                                         ivar_name: nil,
                                         kind: val[2].value,
                                         type: val[4],
                                         annotations: val[0],
                                         location: location,
                                         comment: nil)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 319)
  def _reduce_47(val, _values, result)
            location = location(start_token: val[1], end_pos: val[6].location.end_pos)
        ivar_loc = val[4]&.location
        case name_value = val[4]&.value
        when LocatedValue
          ivar_name = name_value.value
          ivar_name_loc = name_value.location
        when false
          ivar_name = false
          ivar_name_loc = nil
        else
          ivar_name = nil
          ivar_loc = nil
        end
        location = location.with_children(
          required: { keyword: tokenizer.range(val[1]), name: val[3].location, colon: tokenizer.range(val[5]) },
          optional: { ivar: ivar_loc, ivar_name: ivar_name_loc, kind: val[2].location }
        )

        result = Members::AttrWriter.new(name: val[3].value.to_sym,
                                         ivar_name: ivar_name,
                                         kind: val[2].value,
                                         type: val[6],
                                         annotations: val[0],
                                         location: location,
                                         comment: nil)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 346)
  def _reduce_48(val, _values, result)
            location = location(start_token: val[1], end_pos: val[4].location.end_pos)
        name_loc, colon_loc = split_kw_loc(location(token: val[3]))
        location = location.with_children(
          required: { keyword: tokenizer.range(val[1]), name: name_loc, colon: colon_loc },
          optional: { ivar: nil, ivar_name: nil, kind: val[2].location }
        )

        result = Members::AttrAccessor.new(name: value(val[3]).to_sym,
                                           ivar_name: nil,
                                           kind: val[2].value,
                                           type: val[4],
                                           annotations: val[0],
                                           location: location,
                                           comment: nil)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 362)
  def _reduce_49(val, _values, result)
            location = location(start_token: val[1], end_pos: val[6].location.end_pos)
        ivar_loc = val[4]&.location
        case name_value = val[4]&.value
        when LocatedValue
          ivar_name = name_value.value
          ivar_name_loc = name_value.location
        when false
          ivar_name = false
          ivar_name_loc = nil
        else
          ivar_name = nil
          ivar_loc = nil
        end
        location = location.with_children(
          required: { keyword: tokenizer.range(val[1]), name: val[3].location, colon: tokenizer.range(val[5]) },
          optional: { ivar: ivar_loc, ivar_name: ivar_name_loc, kind: val[2].location }
        )

        result = Members::AttrAccessor.new(name: val[3].value.to_sym,
                                           ivar_name: ivar_name,
                                           kind: val[2].value,
                                           type: val[6],
                                           annotations: val[0],
                                           location: location,
                                           comment: nil)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 390)
  def _reduce_50(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 391)
  def _reduce_51(val, _values, result)
     result = LocatedValue.new(value: false, location: location(start_token: val[0], end_token: val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 393)
  def _reduce_52(val, _values, result)
            result = LocatedValue.new(
          value: LocatedValue.new(value: value(val[1]).to_sym, location: location(token: val[1])),
          location: location(start_token: val[0], end_token: val[2])
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 401)
  def _reduce_53(val, _values, result)
            location = location(start_token: val[0], end_pos: val[2].location.end_pos).with_children(
          required: { name: tokenizer.range(val[0]), colon: tokenizer.range(val[1]) },
          optional: { kind: nil }
        )

        result = Members::InstanceVariable.new(
          name: value(val[0]).to_sym,
          type: val[2],
          location: location,
          comment: nil
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 414)
  def _reduce_54(val, _values, result)
            type = val[2]

        if type.is_a?(Types::Variable)
          type = Types::ClassInstance.new(
            name: TypeName.new(name: type.name, namespace: Namespace.empty),
            args: [],
            location: type.location
          )
        end

        location = location(start_token: val[0], end_pos: val[2].location.end_pos).with_children(
          required: { name: tokenizer.range(val[0]), colon: tokenizer.range(val[1]) },
          optional: { kind: nil }
        )

        result = Members::ClassVariable.new(
          name: value(val[0]).to_sym,
          type: type,
          location: location,
          comment: nil
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 437)
  def _reduce_55(val, _values, result)
          type = val[4]

      if type.is_a?(Types::Variable)
        type = Types::ClassInstance.new(
          name: TypeName.new(name: type.name, namespace: Namespace.empty),
          args: [],
          location: type.location
        )
      end

      location = location(start_token: val[0], end_pos: val[4].location.end_pos).with_children(
        required: { name: tokenizer.range(val[2]), colon: tokenizer.range(val[3]) },
        optional: { kind: tokenizer.start_pos(val[0])...tokenizer.end_pos(val[1]) }
      )

      result = Members::ClassInstanceVariable.new(
        name: value(val[2]).to_sym,
        type: type,
        location: location,
        comment: nil
      )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 462)
  def _reduce_56(val, _values, result)
            reset_variable_scope

        location = location(start_token: val[1], end_token: val[6])
        location = location.with_children(
          required: { keyword: tokenizer.range(val[1]), name: val[3].location, end: tokenizer.range(val[6]) },
          optional: { type_params: val[4]&.location }
        )
        result = Declarations::Interface.new(
          name: val[3].value,
          type_params: val[4]&.value || Declarations::ModuleTypeParams.empty,
          members: val[5],
          annotations: val[0],
          location: location,
          comment: nil
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 480)
  def _reduce_57(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 482)
  def _reduce_58(val, _values, result)
            result = val[0].push(val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 487)
  def _reduce_59(val, _values, result)
            unless val[0].kind == :instance
          raise SemanticsError.new("Interface cannot have singleton method", subject: val[0], location: val[0].location)
        end

        if val[0].types.last == :super
          raise SemanticsError.new("Interface method cannot have `super` type", subject: val[0], location: val[0].location)
        end

        result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 498)
  def _reduce_60(val, _values, result)
            unless val[0].name.interface?
          raise SemanticsError.new("Interface should include an interface", subject: val[0], location: val[0].location)
        end

        result = val[0]

    result
  end
.,.,

# reduce 61 omitted

module_eval(<<'.,.,', 'parser.y', 508)
  def _reduce_62(val, _values, result)
            if val[2].value.alias?
          raise SemanticsError.new("Should include module or interface", subject: val[2].value, location: val[2].location)
        end

        location = location(start_token: val[1], end_pos: val[2].location.end_pos).with_children(
          required: { keyword: tokenizer.range(val[1]), name: val[2].location },
          optional: { args: nil }
        )

        result = Members::Include.new(name: val[2].value,
                                      args: [],
                                      annotations: val[0],
                                      location: location,
                                      comment: nil)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 524)
  def _reduce_63(val, _values, result)
            if val[2].value.alias?
          raise SemanticsError.new("Should include module or interface", subject: val[2].value, location: val[2].location)
        end

        location = location(start_token: val[1], end_token: val[5]).with_children(
          required: { keyword: tokenizer.range(val[1]), name: val[2].location },
          optional: { args: tokenizer.start_pos(val[3])...tokenizer.end_pos(val[5]) }
        )

        result = Members::Include.new(name: val[2].value,
                                      args: val[4],
                                      annotations: val[0],
                                      location: location,
                                      comment: nil)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 542)
  def _reduce_64(val, _values, result)
            if val[2].value.alias?
          raise SemanticsError.new("Should extend module or interface", subject: val[2].value, location: val[2].location)
        end

        location = location(start_token: val[1], end_pos: val[2].location.end_pos).with_children(
          required: { keyword: tokenizer.range(val[1]), name: val[2].location },
          optional: { args: nil }
        )

        result = Members::Extend.new(name: val[2].value,
                                     args: [],
                                     annotations: val[0],
                                     location: location,
                                     comment: nil)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 558)
  def _reduce_65(val, _values, result)
            if val[2].value.alias?
          raise SemanticsError.new("Should extend module or interface", subject: val[2].value, location: val[2].location)
        end

        location = location(start_token: val[1], end_token: val[5]).with_children(
          required: { keyword: tokenizer.range(val[1]), name: val[2].location },
          optional: { args: tokenizer.start_pos(val[3])...tokenizer.end_pos(val[5]) }
        )

        result = Members::Extend.new(name: val[2].value,
                                     args: val[4],
                                     annotations: val[0],
                                     location: location,
                                     comment: nil)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 576)
  def _reduce_66(val, _values, result)
            unless val[2].value.class?
          raise SemanticsError.new("Should prepend module", subject: val[2].value, location: val[2].location)
        end

        location = location(start_token: val[1], end_pos: val[2].location.end_pos).with_children(
          required: { keyword: tokenizer.range(val[1]), name: val[2].location },
          optional: { args: nil }
        )

        result = Members::Prepend.new(name: val[2].value,
                                      args: [],
                                      annotations: val[0],
                                      location: location,
                                      comment: nil)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 592)
  def _reduce_67(val, _values, result)
            unless val[2].value.class?
          raise SemanticsError.new("Should prepend module", subject: val[2].value, location: val[2].location)
        end

        location = location(start_token: val[1], end_token: val[5]).with_children(
          required: { keyword: tokenizer.range(val[1]), name: val[2].location },
          optional: { args: tokenizer.start_pos(val[3])...tokenizer.end_pos(val[5]) }
        )

        result = Members::Prepend.new(name: val[2].value,
                                      args: val[4],
                                      annotations: val[0],
                                      location: location,
                                      comment: nil)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 609)
  def _reduce_68(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 611)
  def _reduce_69(val, _values, result)
            RBS.logger.warn "`overload def` syntax is deprecated. Use `...` syntax instead."
        result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 617)
  def _reduce_70(val, _values, result)
            kdef = val[3]
        location = location(start_token: kdef, end_pos: val[6].last.location.end_pos)

        required_children = { keyword: tokenizer.range(kdef), name: val[5].location }
        optional_children = { kind: nil, overload: nil }

        if val[4]
          kind = val[4].value
          optional_children[:kind] = val[4].location
        else
          kind = :instance
        end

        last_type = val[6].last
        if last_type.is_a?(LocatedValue) && last_type.value == :dot3
          overload = true
          optional_children[:overload] = last_type.location
          val[6].pop
        else
          overload = false
        end

        result = Members::MethodDefinition.new(
          name: val[5].value,
          kind: kind,
          types: val[6],
          annotations: val[0],
          location: location.with_children(required: required_children, optional: optional_children),
          comment: nil,
          overload: overload || !!val[2]
        )

    result
  end
.,.,

# reduce 71 omitted

module_eval(<<'.,.,', 'parser.y', 652)
  def _reduce_72(val, _values, result)
            RBS.logger.warn "`incompatible` method attribute is deprecated and ignored."

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 656)
  def _reduce_73(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 657)
  def _reduce_74(val, _values, result)
     result = LocatedValue.new(value: :singleton, location: location(start_token: val[0], end_token: val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 658)
  def _reduce_75(val, _values, result)
     result = LocatedValue.new(value: :singleton_instance, location: location(start_token: val[0], end_token: val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 661)
  def _reduce_76(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 662)
  def _reduce_77(val, _values, result)
     result = [LocatedValue.new(value: :dot3, location: location(token: val[0]))]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 664)
  def _reduce_78(val, _values, result)
            result = val[2].unshift(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 669)
  def _reduce_79(val, _values, result)
            reset_variable_scope

        location =
          if val[1]
            val[1].location + val[2].location
          else
            val[2].location
          end
        type_params = val[1]&.value || []

        type, block = val[2].value

        result = MethodType.new(type_params: type_params,
                                type: type,
                                block: block,
                                location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 688)
  def _reduce_80(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 690)
  def _reduce_81(val, _values, result)
            result = LocatedValue.new(value: val[1], location: location(start_token: val[0], end_token: val[2]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 695)
  def _reduce_82(val, _values, result)
            block = Types::Block.new(type: val[1].value, required: true)
        result = LocatedValue.new(value: block, location: location(start_token: val[0], end_token: val[2]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 699)
  def _reduce_83(val, _values, result)
            block = Types::Block.new(type: val[2].value, required: false)
        result = LocatedValue.new(value: block, location: location(start_token: val[0], end_token: val[3]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 705)
  def _reduce_84(val, _values, result)
            start_pos = tokenizer.start_pos(val[0])
        end_pos = tokenizer.end_pos(val[0])
        value = value(val[0])

        result = LocatedValue.new(value: value, buffer: buffer, range: start_pos...end_pos-1)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 712)
  def _reduce_85(val, _values, result)
            result = LocatedValue.new(value: val[0].value.to_sym,
                                  location: val[0].value)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 718)
  def _reduce_86(val, _values, result)
            result = LocatedValue.new(value: value(val[0]), buffer: buffer, range: tokenizer.range(val[0]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 721)
  def _reduce_87(val, _values, result)
            result = LocatedValue.new(value: value(val[0]), buffer: buffer, range: tokenizer.range(val[0]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 724)
  def _reduce_88(val, _values, result)
            loc0 = location(token: val[0])
        loc1 = location(token: val[1])
        unless loc0.pred?(loc1)
          raise SyntaxError.new(token_str: "kQUESTION", error_value: value(val[1]))
        end

        result = LocatedValue.new(
          value: "#{value(val[0])}?",
          buffer: buffer,
          range: loc0.start_pos...loc1.end_pos
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 737)
  def _reduce_89(val, _values, result)
            loc0 = location(token: val[0])
        loc1 = location(token: val[1])
        unless loc0.pred?(loc1)
          raise SyntaxError.new(token_str: "kEXCLAMATION", error_value: value(val[1]))
        end

        result = LocatedValue.new(
          value: "#{value(val[0])}!",
          buffer: buffer,
          range: loc0.start_pos...loc1.end_pos
        )

    result
  end
.,.,

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'parser.y', 762)
  def _reduce_138(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 764)
  def _reduce_139(val, _values, result)
            val[1].each {|p| insert_bound_variable(p.name) }

        result = LocatedValue.new(value: val[1], location: location(start_token: val[0], end_token: val[2]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 771)
  def _reduce_140(val, _values, result)
            result = Declarations::ModuleTypeParams.new()
        result.add(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 775)
  def _reduce_141(val, _values, result)
            result = val[0].add(val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 780)
  def _reduce_142(val, _values, result)
            loc = case
              when l0 = val[0].location
                l0 + location(token: val[2])
              when l1 = val[1].location
                l1 + location(token: val[2])
              else
                location(token: val[2])
              end
        loc = loc.with_children(
          required: { name: tokenizer.range(val[2]) },
          optional: { variance: val[1].location, unchecked: val[0].location }
        )
        result = Declarations::ModuleTypeParams::TypeParam.new(
          name: value(val[2]).to_sym,
          variance: val[1].value,
          skip_validation: val[0].value,
          location: loc
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 801)
  def _reduce_143(val, _values, result)
     result = LocatedValue.new(value: :invariant, location: nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 802)
  def _reduce_144(val, _values, result)
     result = LocatedValue.new(value: :covariant, location: location(token: val[0]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 803)
  def _reduce_145(val, _values, result)
     result = LocatedValue.new(value: :contravariant, location: location(token: val[0]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 806)
  def _reduce_146(val, _values, result)
     result = LocatedValue.new(value: false, location: nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 807)
  def _reduce_147(val, _values, result)
     result = LocatedValue.new(value: true, location: location(token: val[0]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 810)
  def _reduce_148(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 812)
  def _reduce_149(val, _values, result)
            val[1].each {|var| insert_bound_variable(var) }

        result = LocatedValue.new(value: val[1],
                                  location: location(start_token: val[0], end_token: val[2]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 820)
  def _reduce_150(val, _values, result)
            result = [value(val[0]).to_sym]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 823)
  def _reduce_151(val, _values, result)
            result = val[0].push(value(val[2]).to_sym)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 828)
  def _reduce_152(val, _values, result)
            location = location(start_token: val[1], end_pos: val[3].location.end_pos)
        location = location.with_children(
          required: { keyword: location(token: val[1]), new_name: val[2].location, old_name: val[3].location },
          optional: { new_kind: nil, old_kind: nil }
        )
        result = Members::Alias.new(
          new_name: val[2].value.to_sym,
          old_name: val[3].value.to_sym,
          kind: :instance,
          annotations: val[0],
          location: location,
          comment: nil
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 843)
  def _reduce_153(val, _values, result)
            location = location(start_token: val[1], end_pos: val[7].location.end_pos)
        location = location.with_children(
          required: { keyword: tokenizer.range(val[1]), new_name: val[4].location, old_name: val[7].location },
          optional: {
            new_kind: location(start_token: val[2], end_token: val[3]),
            old_kind: location(start_token: val[5], end_token: val[6])
          }
        )
        result = Members::Alias.new(
          new_name: val[4].value.to_sym,
          old_name: val[7].value.to_sym,
          kind: :singleton,
          annotations: val[0],
          location: location,
          comment: nil
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 863)
  def _reduce_154(val, _values, result)
            location = location(start_token: val[1], end_pos: val[4].location.end_pos)
        location = location.with_children(
          required: { keyword: tokenizer.range(val[1]), name: val[2].location, eq: tokenizer.range(val[3]) }
        )
        result = Declarations::Alias.new(
          name: val[2].value,
          type: val[4],
          annotations: val[0],
          location: location,
          comment: nil
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 878)
  def _reduce_155(val, _values, result)
            location = val[0].location + val[2].location
        location = location.with_children(
          required: { name: val[0].location, colon: tokenizer.range(val[1]) }
        )
        result = Declarations::Constant.new(name: val[0].value,
                                            type: val[2],
                                            location: location,
                                            comment: nil)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 888)
  def _reduce_156(val, _values, result)
            if val[0]
          lhs_loc = location(start_pos: val[0].location.start_pos, end_token: val[1])
          location = val[0].location + val[2].location
        else
          lhs_loc = location(token: val[1])
          location = lhs_loc + val[2].location
        end

        name_loc, colon_loc = split_kw_loc(lhs_loc)
        location = location.with_children(
          required: { name: name_loc, colon: colon_loc }
        )

        name = TypeName.new(name: value(val[1]), namespace: val[0]&.value || Namespace.empty)
        result = Declarations::Constant.new(name: name,
                                            type: val[2],
                                            location: location,
                                            comment: nil)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 910)
  def _reduce_157(val, _values, result)
            location = location(start_token: val[0], end_pos: val[2].location.end_pos)
        location = location.with_children(
          required: { name: tokenizer.range(val[0]), colon: tokenizer.range(val[1]) }
        )
        result = Declarations::Global.new(name: value(val[0]).to_sym,
                                          type: val[2],
                                          location: location,
                                          comment: nil)

    result
  end
.,.,

# reduce 158 omitted

module_eval(<<'.,.,', 'parser.y', 923)
  def _reduce_159(val, _values, result)
            types = case l = val[0]
                when Types::Union
                  l.types + [val[2]]
                else
                  [l, val[2]]
                end

        result = Types::Union.new(types: types, location: val[0].location + val[2].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 933)
  def _reduce_160(val, _values, result)
            types = case l = val[0]
                when Types::Intersection
                  l.types + [val[2]]
                else
                  [l, val[2]]
                end

        result = Types::Intersection.new(types: types,
                                         location: val[0].location + val[2].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 946)
  def _reduce_161(val, _values, result)
            result = Types::Bases::Void.new(location: location(token: val[0]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 949)
  def _reduce_162(val, _values, result)
            loc = location(token: val[0])
        RBS.logger.warn "`any` type is deprecated. Use `untyped` instead. (#{loc.to_s})"
        result = Types::Bases::Any.new(location: loc)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 954)
  def _reduce_163(val, _values, result)
            result = Types::Bases::Any.new(location: location(token: val[0]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 957)
  def _reduce_164(val, _values, result)
            result = Types::Bases::Bool.new(location: location(token: val[0]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 960)
  def _reduce_165(val, _values, result)
            result = Types::Bases::Nil.new(location: location(token: val[0]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 963)
  def _reduce_166(val, _values, result)
            result = Types::Bases::Top.new(location: location(token: val[0]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 966)
  def _reduce_167(val, _values, result)
            result = Types::Bases::Bottom.new(location: location(token: val[0]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 969)
  def _reduce_168(val, _values, result)
            result = Types::Bases::Self.new(location: location(token: val[0]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 972)
  def _reduce_169(val, _values, result)
            loc = location(token: val[0])
        result = Types::Optional.new(
          type: Types::Bases::Self.new(location: loc),
          location: loc
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 979)
  def _reduce_170(val, _values, result)
            result = Types::Bases::Instance.new(location: location(token: val[0]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 982)
  def _reduce_171(val, _values, result)
            result = Types::Bases::Class.new(location: location(token: val[0]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 985)
  def _reduce_172(val, _values, result)
            result = Types::Literal.new(literal: true, location: location(token: val[0]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 988)
  def _reduce_173(val, _values, result)
            result = Types::Literal.new(literal: false, location: location(token: val[0]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 991)
  def _reduce_174(val, _values, result)
            result = Types::Literal.new(literal: value(val[0]), location: location(token: val[0]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 994)
  def _reduce_175(val, _values, result)
            result = Types::Literal.new(literal: value(val[0]), location: location(token: val[0]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 997)
  def _reduce_176(val, _values, result)
            result = Types::Literal.new(literal: value(val[0]), location: location(token: val[0]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1000)
  def _reduce_177(val, _values, result)
            name = val[0].value
        args = []
        location = val[0].location

        case
        when name.class?
          if is_bound_variable?(name.name)
            result = Types::Variable.new(name: name.name, location: location)
          else
            location = location.with_children(
              required: { name: val[0].location },
              optional: { args: nil }
            )
            result = Types::ClassInstance.new(name: name, args: args, location: location)
          end
        when name.alias?
          location = location.with_children(
            required: { name: val[0].location },
            optional: { args: nil }
          )
          result = Types::Alias.new(name: name, location: location)
        when name.interface?
          location = location.with_children(
            required: { name: val[0].location },
            optional: { args: nil }
          )
          result = Types::Interface.new(name: name, args: args, location: location)
        end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1030)
  def _reduce_178(val, _values, result)
            name = val[0].value
        args = val[2]
        location = val[0].location + location(token: val[3])
        args_range = tokenizer.start_pos(val[1])...tokenizer.end_pos(val[3])

        case
        when name.class?
          if is_bound_variable?(name.name)
            raise SemanticsError.new("#{name.name} is type variable and cannot be applied", subject: name, location: location)
          end
          location = location.with_children(
            required: { name: val[0].location },
            optional: { args: args_range }
          )
          result = Types::ClassInstance.new(name: name, args: args, location: location)
        when name.interface?
          location = location.with_children(
            required: { name: val[0].location },
            optional: { args: args_range }
          )
          result = Types::Interface.new(name: name, args: args, location: location)
        else
          raise SyntaxError.new(token_str: "kLBRACKET", error_value: val[1])
        end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1056)
  def _reduce_179(val, _values, result)
            location = location(range: tokenizer.start_pos(val[0])...tokenizer.end_pos(val[1]))
        result = Types::Tuple.new(types: [], location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1060)
  def _reduce_180(val, _values, result)
            location = location(range: tokenizer.start_pos(val[0])...tokenizer.end_pos(val[3]))
        types = val[1]
        result = Types::Tuple.new(types: types, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1065)
  def _reduce_181(val, _values, result)
            type = val[1].dup
        loc = location(start_token: val[0], end_token: val[2])
        type.instance_eval do
          @location = loc
        end
        result = type

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1073)
  def _reduce_182(val, _values, result)
            location = location(start_token: val[0], end_token: val[3])
        location = location.with_children(
          required: { name: val[2].location }
        )
        result = Types::ClassSingleton.new(name: val[2].value, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1080)
  def _reduce_183(val, _values, result)
            type, block = val[1].value
        location = location(start_token: val[0], end_pos: val[1].location.end_pos)
        result = Types::Proc.new(type: type, block: block, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1085)
  def _reduce_184(val, _values, result)
            result = Types::Optional.new(type: val[0], location: location(start_pos: val[0].location.start_pos, end_token: val[1]))

    result
  end
.,.,

# reduce 185 omitted

module_eval(<<'.,.,', 'parser.y', 1091)
  def _reduce_186(val, _values, result)
            result = [val[0]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1094)
  def _reduce_187(val, _values, result)
            result = val[0].push([val[2]])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1099)
  def _reduce_188(val, _values, result)
            result = Types::Record.new(
          fields: val[1],
          location: location(start_token: val[0], end_token: val[3])
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1107)
  def _reduce_189(val, _values, result)
            result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1110)
  def _reduce_190(val, _values, result)
            result = val[0].merge!(val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1115)
  def _reduce_191(val, _values, result)
            result = { value(val[0]) => val[2] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1118)
  def _reduce_192(val, _values, result)
            result = { value(val[0]) => val[2] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1121)
  def _reduce_193(val, _values, result)
            result = { value(val[0]) => val[2] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1124)
  def _reduce_194(val, _values, result)
            result = { value(val[0]) => val[1] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1127)
  def _reduce_195(val, _values, result)
            result = { value(val[0]).to_sym => val[2] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1130)
  def _reduce_196(val, _values, result)
            result = { value(val[0]) => val[2] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1133)
  def _reduce_197(val, _values, result)
            result = { value(val[0]) => val[2] }

    result
  end
.,.,

# reduce 198 omitted

module_eval(<<'.,.,', 'parser.y', 1139)
  def _reduce_199(val, _values, result)
            result = val[0]

    result
  end
.,.,

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

module_eval(<<'.,.,', 'parser.y', 1146)
  def _reduce_204(val, _values, result)
            case
        when val[0]
          location = val[0].location + val[3].location
        when val[1]
          location = val[1].location + val[3].location
        else
          location = location(start_token: val[2], end_pos: val[3].end_pos)
        end

        params = val[0]&.value || [[], [], nil, [], {}, {}, nil]

        type = Types::Function.new(
          required_positionals: params[0],
          optional_positionals: params[1],
          rest_positionals: params[2],
          trailing_positionals: params[3],
          required_keywords: params[4],
          optional_keywords: params[5],
          rest_keywords: params[6],
          return_type: val[3]
        )

        block = val[1].value

        result = LocatedValue.new(value: [type, block], location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1173)
  def _reduce_205(val, _values, result)
            result = LocatedValue.new(value: [val[0].value, nil], location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1178)
  def _reduce_206(val, _values, result)
            location = location(start_token: val[0], end_pos: val[4].location.end_pos)
        type = Types::Function.new(
          required_positionals: val[1][0],
          optional_positionals: val[1][1],
          rest_positionals: val[1][2],
          trailing_positionals: val[1][3],
          required_keywords: val[1][4],
          optional_keywords: val[1][5],
          rest_keywords: val[1][6],
          return_type: val[4],
        )

        result = LocatedValue.new(value: type, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1193)
  def _reduce_207(val, _values, result)
            location = location(start_token: val[0], end_pos: val[1].location.end_pos)
        type = Types::Function.new(
          required_positionals: [],
          optional_positionals: [],
          rest_positionals: nil,
          trailing_positionals: [],
          required_keywords: {},
          optional_keywords: {},
          rest_keywords: nil,
          return_type: val[1]
        )

        result = LocatedValue.new(value: type, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1210)
  def _reduce_208(val, _values, result)
            result = val[2]
        result[0].unshift(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1214)
  def _reduce_209(val, _values, result)
            result = empty_params_result
        result[0].unshift(val[0])

    result
  end
.,.,

# reduce 210 omitted

module_eval(<<'.,.,', 'parser.y', 1221)
  def _reduce_211(val, _values, result)
            result = val[2]
        result[1].unshift(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1225)
  def _reduce_212(val, _values, result)
            result = empty_params_result
        result[1].unshift(val[0])

    result
  end
.,.,

# reduce 213 omitted

module_eval(<<'.,.,', 'parser.y', 1232)
  def _reduce_214(val, _values, result)
            result = val[2]
        result[2] = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1236)
  def _reduce_215(val, _values, result)
            result = empty_params_result
        result[2] = val[0]

    result
  end
.,.,

# reduce 216 omitted

module_eval(<<'.,.,', 'parser.y', 1243)
  def _reduce_217(val, _values, result)
            result = val[2]
        result[3].unshift(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1247)
  def _reduce_218(val, _values, result)
            result = empty_params_result
        result[3].unshift(val[0])

    result
  end
.,.,

# reduce 219 omitted

module_eval(<<'.,.,', 'parser.y', 1254)
  def _reduce_220(val, _values, result)
            result = empty_params_result

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1257)
  def _reduce_221(val, _values, result)
            result = val[2]
        result[4].merge!(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1261)
  def _reduce_222(val, _values, result)
            result = empty_params_result
        result[4].merge!(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1265)
  def _reduce_223(val, _values, result)
            result = val[2]
        result[5].merge!(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1269)
  def _reduce_224(val, _values, result)
            result = empty_params_result
        result[5].merge!(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1273)
  def _reduce_225(val, _values, result)
            result = empty_params_result
        result[6] = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1279)
  def _reduce_226(val, _values, result)
            loc = val[0].location
        if val[1]
          var_name = value(val[1]).to_sym
          var_loc = location(token: val[1])
          loc = (loc + var_loc).with_children(optional: { name: var_loc })
        end

        result = Types::Function::Param.new(
          type: val[0],
          name: var_name,
          location: loc
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1295)
  def _reduce_227(val, _values, result)
            if val[2]
          name_range = tokenizer.range(val[2])
          loc = location(start_token: val[0], end_pos: name_range.end)
          name = value(val[2]).to_sym
        else
          loc = location(start_token: val[0], end_pos: val[1].location.end_pos)
        end
        loc = loc.with_children(optional: { name: name_range })

        result = Types::Function::Param.new(type: val[1], name: name, location: loc)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1309)
  def _reduce_228(val, _values, result)
            if val[2]
          name_range = tokenizer.range(val[2])
          loc = location(start_token: val[0], end_pos: name_range.end)
          name = value(val[2]).to_sym
        else
          loc = location(start_token: val[0], end_pos: val[1].location.end_pos)
        end
        loc = loc.with_children(optional: { name: name_range })

        result = Types::Function::Param.new(type: val[1], name: name, location: loc)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1323)
  def _reduce_229(val, _values, result)
            if val[2]
          name_range = tokenizer.range(val[2])
          loc = location(start_token: val[0], end_pos: name_range.end)
          name = value(val[2]).to_sym
        else
          loc = location(start_token: val[0], end_pos: val[1].location.end_pos)
        end
        loc = loc.with_children(optional: { name: name_range })

        param = Types::Function::Param.new(type: val[1], name: name, location: loc)
        result = { value(val[0]) => param }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1338)
  def _reduce_230(val, _values, result)
            if val[3]
          name_range = tokenizer.range(val[3])
          loc = location(start_token: val[0], end_pos: name_range.end)
          name = value(val[3]).to_sym
        else
          loc = location(start_token: val[0], end_pos: val[2].location.end_pos)
        end
        loc = loc.with_children(optional: { name: name_range })

        param = Types::Function::Param.new(type: val[2], name: name, location: loc)
        result = { value(val[1]) => param }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1353)
  def _reduce_231(val, _values, result)
            if val[2]
          name_range = tokenizer.range(val[2])
          loc = location(start_token: val[0], end_pos: name_range.end)
          name = value(val[2]).to_sym
        else
          loc = location(start_token: val[0], end_pos: val[1].location.end_pos)
        end
        loc = loc.with_children(optional: { name: name_range })

        result = Types::Function::Param.new(type: val[1], name: name, location: loc)

    result
  end
.,.,

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

module_eval(<<'.,.,', 'parser.y', 1370)
  def _reduce_238(val, _values, result)
            namespace = val[0]&.value || Namespace.empty
        name = value(val[1]).to_sym
        type_name = TypeName.new(namespace: namespace, name: name)
        loc0 = val[0]&.location
        loc1 = location(token: val[1])
        location = loc0 ? loc0 + loc1 : loc1
        result = LocatedValue.new(value: type_name, location: location)

    result
  end
.,.,

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

module_eval(<<'.,.,', 'parser.y', 1384)
  def _reduce_242(val, _values, result)
            namespace = val[0]&.value || Namespace.empty
        name = value(val[1]).to_sym
        type_name = TypeName.new(namespace: namespace, name: name)
        location =
          if loc0 = val[0]&.location
            location(start_pos: loc0.start_pos, end_token: val[1])
          else
            location(token: val[1])
          end
        result = LocatedValue.new(value: type_name, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1398)
  def _reduce_243(val, _values, result)
            namespace = val[0]&.value || Namespace.empty
        name = value(val[1]).to_sym
        type_name = TypeName.new(namespace: namespace, name: name)
        loc0 = val[0]&.location
        loc1 = location(token: val[1])
        location = loc0 ? loc0 + loc1 : loc1
        result = LocatedValue.new(value: type_name, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1409)
  def _reduce_244(val, _values, result)
            namespace = val[0]&.value || Namespace.empty
        name = value(val[1]).to_sym
        type_name = TypeName.new(namespace: namespace, name: name)
        location =
          if loc0 = val[0]&.location
            location(start_pos: loc0.start_pos, end_token: val[1])
          else
            location(token: val[1])
          end
        result = LocatedValue.new(value: type_name, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1423)
  def _reduce_245(val, _values, result)
            result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1426)
  def _reduce_246(val, _values, result)
            result = LocatedValue.new(value: Namespace.root, buffer: buffer, range: tokenizer.range(val[0]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1429)
  def _reduce_247(val, _values, result)
            namespace = Namespace.parse(value(val[1])).absolute!
        result = LocatedValue.new(value: namespace, buffer: buffer, range: tokenizer.start_pos(val[0])...tokenizer.end_pos(val[1]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1433)
  def _reduce_248(val, _values, result)
            namespace = Namespace.parse(value(val[0]))
        result = LocatedValue.new(value: namespace, buffer: buffer, range: tokenizer.range(val[0]))

    result
  end
.,.,

# reduce 249 omitted

# reduce 250 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module RBS


