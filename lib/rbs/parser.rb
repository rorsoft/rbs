#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'
module RBS
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 1044)

Types = RBS::Types
Namespace = RBS::Namespace
TypeName = RBS::TypeName
Declarations = RBS::AST::Declarations
Members = RBS::AST::Members
MethodType = RBS::MethodType
Annotation = RBS::AST::Annotation

class LocatedValue
  attr_reader :location
  attr_reader :value

  def initialize(location:, value:)
    @location = location
    @value = value
  end
end

require "strscan"

attr_reader :input
attr_reader :buffer
attr_reader :eof_re

def initialize(type, buffer:, eof_re:)
  super()
  @type = type
  @buffer = buffer
  @input = StringScanner.new(buffer.content)
  @eof_re = eof_re
  @eof = false
  @bound_variables_stack = []
  @comments = {}
  @ascii_only = buffer.content.ascii_only?
end

def start_merged_variables_scope
  set = @bound_variables_stack.last&.dup || Set.new
  @bound_variables_stack.push set
end

def start_new_variables_scope
  @bound_variables_stack.push Set.new
end

def reset_variable_scope
  @bound_variables_stack.pop
end

def insert_bound_variable(var)
  @bound_variables_stack.last << var
end

def is_bound_variable?(var)
  (@bound_variables_stack.last || Set.new).member?(var)
end

def self.parse_signature(input, eof_re: nil)
  case input
  when RBS::Buffer
    buffer = input
  else
    buffer = RBS::Buffer.new(name: nil, content: input.to_s)
  end

  self.new(:SIGNATURE, buffer: buffer, eof_re: eof_re).do_parse
end

def self.parse_type(input, variables: [], eof_re: nil)
  case input
  when RBS::Buffer
    buffer = input
  else
    buffer = RBS::Buffer.new(name: nil, content: input.to_s)
  end

  self.new(:TYPE, buffer: buffer, eof_re: eof_re).yield_self do |parser|
    parser.start_new_variables_scope

    variables.each do |var|
      parser.insert_bound_variable var
    end

    parser.do_parse
  ensure
    parser.reset_variable_scope
  end
end

def self.parse_method_type(input, variables: [], eof_re: nil)
  case input
  when RBS::Buffer
    buffer = input
  else
    buffer = RBS::Buffer.new(name: nil, content: input.to_s)
  end

  self.new(:METHODTYPE, buffer: buffer, eof_re: eof_re).yield_self do |parser|
    parser.start_new_variables_scope

    variables.each do |var|
      parser.insert_bound_variable var
    end

    parser.do_parse
  ensure
    parser.reset_variable_scope
  end
end

def leading_comment(location)
  @comments[location.start_line-1]
end

def push_comment(string, location)
  if (comment = leading_comment(location)) && comment.location.start_column == location.start_column
    comment.concat(string: "#{string}\n", location: location)
    @comments[comment.location.end_line] = comment
  else
    new_comment = AST::Comment.new(string: "#{string}\n", location: location)
    @comments[new_comment.location.end_line] = new_comment
  end
end

def new_token(type, value = input.matched)
  charpos = charpos(input)
  matched = input.matched

  if matched
    start_index = charpos - matched.size
    end_index = charpos

    location = RBS::Location.new(buffer: buffer,
                                 start_pos: start_index,
                                 end_pos: end_index)

    [type, LocatedValue.new(location: location, value: value)]
  else
    # scanner hasn't matched yet
    [false, nil]
  end
end

def charpos(scanner)
  if @ascii_only
    scanner.pos
  else
    scanner.charpos
  end
end

def empty_params_result
  [
    [],
    [],
    nil,
    [],
    {},
    {},
    nil
  ]
end

KEYWORDS = {
  "class" => :kCLASS,
  "type" => :kTYPE,
  "def" => :kDEF,
  "self" => :kSELF,
  "void" => :kVOID,
  "any" => :kANY,
  "untyped" => :kUNTYPED,
  "top" => :kTOP,
  "bot" => :kBOT,
  "instance" => :kINSTANCE,
  "bool" => :kBOOL,
  "nil" => :kNIL,
  "true" => :kTRUE,
  "false" => :kFALSE,
  "singleton" => :kSINGLETON,
  "interface" => :kINTERFACE,
  "end" => :kEND,
  "include" => :kINCLUDE,
  "extend" => :kEXTEND,
  "prepend" => :kPREPEND,
  "module" => :kMODULE,
  "attr_reader" => :kATTRREADER,
  "attr_writer" => :kATTRWRITER,
  "attr_accessor" => :kATTRACCESSOR,
  "public" => :kPUBLIC,
  "private" => :kPRIVATE,
  "alias" => :kALIAS,
  "extension" => :kEXTENSION,
  "incompatible" => :kINCOMPATIBLE,
  "unchecked" => :kUNCHECKED,
  "overload" => :kOVERLOAD,
  "out" => :kOUT,
  "in" => :kIN,
}
KEYWORDS_RE = /#{Regexp.union(*KEYWORDS.keys)}\b/

PUNCTS = {
  "===" => :tOPERATOR,
  "==" => :tOPERATOR,
  "=~" => :tOPERATOR,
  "!~" => :tOPERATOR,
  "!=" => :tOPERATOR,
  ">=" => :tOPERATOR,
  "<<" => :tOPERATOR,
  "<=>" => :tOPERATOR,
  "<=" => :tOPERATOR,
  ">>" => :tOPERATOR,
  ">" => :tOPERATOR,
  "~" => :tOPERATOR,
  "+@" => :tOPERATOR,
  "+" => :tOPERATOR,
  "[]=" => :tOPERATOR,
  "[]" => :tOPERATOR,
  "::" => :kCOLON2,
  ":" => :kCOLON,
  "(" => :kLPAREN,
  ")" => :kRPAREN,
  "[" => :kLBRACKET,
  "]" => :kRBRACKET,
  "{" => :kLBRACE,
  "}" => :kRBRACE,
  "," => :kCOMMA,
  "|" => :kBAR,
  "&" => :kAMP,
  "^" => :kHAT,
  "->" => :kARROW,
  "=>" => :kFATARROW,
  "=" => :kEQ,
  "?" => :kQUESTION,
  "!" => :kEXCLAMATION,
  "**" => :kSTAR2,
  "*" => :kSTAR,
  "..." => :kDOT3,
  "." => :kDOT,
  "<" => :kLT,
  "-@" => :tOPERATOR,
  "-" => :tOPERATOR,
  "/" => :tOPERATOR,
  "`" => :tOPERATOR,
  "%" => :tOPERATOR,
}
PUNCTS_RE = Regexp.union(*PUNCTS.keys)

ANNOTATION_RE = Regexp.union(/%a\{.*?\}/,
                             /%a\[.*?\]/,
                             /%a\(.*?\)/,
                             /%a\<.*?\>/,
                             /%a\|.*?\|/)
def next_token
  if @type
    type = @type
    @type = nil
    return [:"type_#{type}", nil]
  end

  return new_token(false, '') if @eof

  while true
    return new_token(false, '') if input.eos?

    case
    when input.scan(/\s+/)
      # skip
    when input.scan(/#(( *)|( ?(?<string>.*)))\n/)
      charpos = charpos(input)
      start_index = charpos - input.matched.size
      end_index = charpos-1

      location = RBS::Location.new(buffer: buffer,
                                               start_pos: start_index,
                                               end_pos: end_index)

      push_comment input[:string] || "", location
    else
      break
    end
  end

  case
  when eof_re && input.scan(eof_re)
    @eof = true
    [:tEOF, input.matched]
  when input.scan(/`[a-zA-Z_]\w*`/)
    s = input.matched.yield_self {|s| s[1, s.length-2] }
    new_token(:tQUOTEDIDENT, s)
  when input.scan(/`(\\`|[^` :])+`/)
    s = input.matched.yield_self {|s| s[1, s.length-2] }.gsub(/\\`/, '`')
    new_token(:tQUOTEDMETHOD, s)
  when input.scan(ANNOTATION_RE)
    s = input.matched.yield_self {|s| s[3, s.length-4] }.strip
    new_token(:tANNOTATION, s)
  when input.scan(/self\?/)
    new_token(:kSELFQ, "self?")
  when input.scan(/(([a-zA-Z]\w*)|(_\w+))=/)
    new_token(:tWRITE_ATTR)
  when input.scan(KEYWORDS_RE)
    new_token(KEYWORDS[input.matched], input.matched.to_sym)
  when input.scan(/:((@{,2}|\$)?\w+(\?|\!)?|\+|\-)\b?/)
    s = input.matched.yield_self {|s| s[1, s.length] }.to_sym
    new_token(:tSYMBOL, s)
  when input.scan(/[+-]?\d[\d_]*/)
    new_token(:tINTEGER, input.matched.to_i)
  when input.scan(PUNCTS_RE)
    new_token(PUNCTS[input.matched])
  when input.scan(/(::)?([A-Z]\w*::)+/)
    new_token(:tNAMESPACE)
  when input.scan(/[a-z_]\w*:/)
    new_token(:tLKEYWORD, input.matched.chop.to_sym)
  when input.scan(/[a-z_]\w*[?!]:/)
    new_token(:tLKEYWORD_Q_E, input.matched.chop.to_sym)
  when input.scan(/[A-Z]\w*:/)
    new_token(:tUKEYWORD, input.matched.chop.to_sym)
  when input.scan(/[A-Z]\w*[?!]:/)
    new_token(:tUKEYWORD_Q_E, input.matched.chop.to_sym)
  when input.scan(/\$[A-Za-z_]\w*/)
    new_token(:tGLOBALIDENT)
  when input.scan(/@[a-zA-Z_]\w*/)
    new_token(:tIVAR, input.matched.to_sym)
  when input.scan(/@@[a-zA-Z_]\w*/)
    new_token(:tCLASSVAR, input.matched.to_sym)
  when input.scan(/_[a-zA-Z]\w*\b/)
    new_token(:tINTERFACEIDENT)
  when input.scan(/[A-Z]\w*\b/)
    new_token(:tUIDENT)
  when input.scan(/[a-z_]\w*\b/)
    new_token(:tLIDENT)
  when input.scan(/"(\\"|[^"])*"/)
    s = input.matched.yield_self {|s| s[1, s.length - 2] }.gsub(/\\"/, '"')
    new_token(:tSTRING, s)
  when input.scan(/'(\\'|[^'])*'/)
    s = input.matched.yield_self {|s| s[1, s.length - 2] }.gsub(/\\'/, "'")
    new_token(:tSTRING, s)
  else
    raise "Unexpected token: #{input.peek(10)}..."
  end
end

def on_error(token_id, error_value, value_stack)
  raise SyntaxError.new(token_str: token_to_str(token_id), error_value: error_value, value_stack: value_stack)
end

class SyntaxError < StandardError
  attr_reader :token_str, :error_value, :value_stack

  def initialize(token_str:, error_value:, value_stack: nil)
    @token_str = token_str
    @error_value = error_value
    @value_stack = value_stack

    super "parse error on value: #{error_value.inspect} (#{token_str})"
  end
end

class SemanticsError < StandardError
  attr_reader :subject, :location, :original_message

  def initialize(message, subject:, location:)
    @subject = subject
    @location = location
    @original_message = message

    super "parse error on #{location}: #{message}"
  end
end

...end parser.y/module_eval...
##### State transition tables begin ###

clist = [
'341,342,33,343,5,58,59,60,61,37,354,380,33,33,33,340,42,50,352,379,40',
'41,209,210,211,212,213,214,215,216,220,33,217,208,218,219,104,115,105',
'106,107,121,76,32,196,336,330,331,33,51,334,332,335,32,32,32,33,333',
'120,108,109,110,112,114,113,329,338,339,111,116,118,43,32,197,48,122',
'123,119,124,341,342,33,343,66,58,59,60,61,39,32,301,33,33,33,340,231',
'50,32,40,41,83,209,210,211,212,213,214,215,216,220,33,217,208,218,219',
'104,115,105,106,107,121,33,32,144,336,330,331,39,51,334,332,335,32,32',
'32,50,333,120,108,109,110,112,114,113,329,338,339,111,116,118,89,32',
'87,320,122,123,119,124,341,342,145,343,32,58,59,60,61,51,158,2,3,4,316',
'340,157,164,199,88,40,41,209,210,211,212,213,214,215,216,220,276,217',
'208,218,219,104,115,105,106,107,121,88,200,146,336,330,331,324,147,334',
'332,335,40,41,361,277,333,120,108,109,110,112,114,113,329,338,339,111',
'116,118,341,342,88,343,122,123,119,124,-4,88,-239,148,33,76,80,340,-239',
'395,396,397,156,76,209,210,211,212,213,214,215,216,355,159,217,208,218',
'219,104,115,105,106,107,121,88,88,88,336,330,331,40,41,334,332,335,32',
'40,41,161,333,120,108,109,110,112,114,113,329,338,339,111,116,118,341',
'342,163,343,122,123,119,124,41,58,59,60,61,39,166,340,55,54,56,40,41',
'158,209,210,211,212,213,214,215,216,220,-107,217,208,218,219,104,115',
'105,106,107,121,40,41,-108,336,330,331,40,41,334,332,335,63,64,-109',
'65,333,120,108,109,110,112,114,113,329,338,339,111,116,118,341,342,-110',
'343,122,123,119,124,-111,58,59,60,61,40,41,340,55,54,56,40,41,-112,209',
'210,211,212,213,214,215,216,220,-113,217,208,218,219,104,115,105,106',
'107,121,40,41,-114,336,330,331,272,273,334,332,335,279,280,365,366,333',
'120,108,109,110,112,114,113,329,338,339,111,116,118,40,41,40,41,122',
'123,119,124,341,342,-115,343,-116,58,59,60,61,40,41,40,41,40,41,340',
'387,388,40,41,40,41,209,210,211,212,213,214,215,216,220,-117,217,208',
'218,219,104,115,105,106,107,121,40,41,48,336,330,331,40,41,334,332,335',
'-132,171,172,173,333,120,108,109,110,112,114,113,329,338,339,111,116',
'118,341,342,174,343,122,123,119,124,175,176,177,42,201,234,235,340,237',
'238,239,241,83,245,209,210,211,212,213,214,215,216,220,245,217,208,218',
'219,104,115,105,106,107,121,245,251,254,336,330,331,42,257,334,332,335',
'259,263,265,267,333,120,108,109,110,112,114,113,329,338,339,111,116',
'118,268,42,270,307,122,123,119,124,33,309,263,58,59,60,61,311,267,321',
'22,23,21,322,26,-217,25,323,30,359,93,94,95,96,97,98,99,100,117,16,101',
'92,102,103,104,115,105,106,107,121,364,32,364,364,371,28,372,139,373',
'140,142,374,375,377,378,381,120,108,109,110,112,114,113,382,392,401',
'111,116,118,402,403,406,407,122,123,119,124,33,408,409,58,59,60,61,406',
',,22,23,21,,26,,25,,30,,93,94,95,96,97,98,99,100,117,16,101,92,102,103',
'104,115,105,106,107,121,,32,,,,28,,,,,,,,,,,120,108,109,110,112,114',
'113,,,,111,116,118,,,,,122,123,119,124,33,,,58,59,60,61,,,,22,23,21',
',26,-217,25,,30,,93,94,95,96,97,98,99,100,117,16,101,92,102,103,104',
'115,105,106,107,121,,32,,,,28,,139,,140,142,,,,,,120,108,109,110,112',
'114,113,,,,111,116,118,,,,,122,123,119,124,33,,,58,59,60,61,,,,22,23',
'21,,26,-217,25,,30,,93,94,95,96,97,98,99,100,117,16,101,92,102,103,104',
'115,105,106,107,121,,32,,,,28,,139,,140,142,,,,,,120,108,109,110,112',
'114,113,,,,111,116,118,,,,,122,123,119,124,33,,,58,59,60,61,,,,22,23',
'21,,26,-217,25,,30,,93,94,95,96,97,98,99,100,117,16,101,92,102,103,104',
'115,105,106,107,121,,32,,,,28,,139,,140,142,,,,,,120,108,109,110,112',
'114,113,,,,111,116,118,,,,,122,123,119,124,33,,,58,59,60,61,,,,22,23',
'21,,26,-217,25,,30,,93,94,95,96,97,98,99,100,117,16,101,92,102,103,104',
'115,105,106,107,121,,32,,,,28,,207,,,142,,,,,,120,108,109,110,112,114',
'113,,,,111,116,118,,,,,122,123,119,124,33,,,58,59,60,61,,,,22,23,21',
',26,-217,25,,30,,93,94,95,96,97,98,99,100,117,16,101,92,102,103,104',
'115,105,106,107,121,168,32,169,,,28,,207,,,142,,,,,,120,108,109,110',
'112,114,113,168,,169,111,116,118,58,59,60,61,122,123,119,124,,,,,,,',
'40,41,209,210,211,212,213,214,215,216,220,,217,208,218,219,104,115,105',
'106,107,121,170,40,41,,,,,207,,,142,,,,,,120,108,109,110,112,114,113',
'170,,,111,116,118,58,59,60,61,122,123,119,124,,,,,,,,,,209,210,211,212',
'213,214,215,216,220,,217,208,218,219,104,115,105,106,107,121,168,,169',
',,,,207,,,142,,,,,,120,108,109,110,112,114,113,168,,169,111,116,118',
'58,59,60,61,122,123,119,124,,,,,,,,40,41,209,210,211,212,213,214,215',
'216,220,,217,208,218,219,104,115,105,106,107,121,170,40,41,168,152,169',
'168,155,169,153,,,,,,,120,108,109,110,112,114,113,170,,,111,116,118',
'154,,,,122,123,119,124,,,,151,,,,,,,40,41,,40,41,-239,,33,,80,,-239',
',,296,297,76,-239,,33,,80,170,-239,,170,296,297,76,,,,-239,,33,298,80',
',-239,,,296,297,76,293,292,,298,32,,,,,,,,293,292,,-239,32,33,298,80',
'284,-239,,,296,297,76,293,292,,,32,308,,,,,,,,,,,,,298,,312,,,,,,,293',
'292,,33,32,,,,,,,,,22,23,21,,26,,25,360,30,,8,12,19,20,9,10,13,14,15',
'16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,45,30,,8,12,19,20',
'9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30',
',8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21',
',26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,',
'28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33',
',,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18',
'11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14',
'15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20',
'9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30',
',8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21',
',26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,',
'28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33',
',,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18',
'11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14',
'15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20',
'9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30',
',8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21',
',26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,',
'28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33',
',,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18',
'11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14',
'15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20',
'9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30',
',8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21',
',26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,',
'28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33',
',,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18',
'11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14',
'15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20',
'9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30',
',8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21',
',26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,',
'28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33',
',,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18',
'11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14',
'15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20',
'9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30',
',8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21',
',26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,',
'28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33',
',,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18',
'11,27,152,,,155,,153,,32,320,,,28,,,,,,,,,,,,,,154,,316,317,313,314',
'315,,,,318,151' ]
        racc_action_table = arr = ::Array.new(2779, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'313,313,48,313,1,313,313,313,313,5,319,364,155,187,188,313,7,28,319',
'364,44,44,313,313,313,313,313,313,313,313,313,190,313,313,313,313,313',
'313,313,313,313,313,269,48,160,313,313,313,231,28,313,313,313,155,187',
'188,259,313,313,313,313,313,313,313,313,313,313,313,313,313,313,24,190',
'160,27,313,313,313,313,314,314,265,314,32,314,314,314,314,35,231,269',
'189,267,316,314,189,196,259,6,6,36,314,314,314,314,314,314,314,314,314',
'317,314,314,314,314,314,314,314,314,314,314,318,265,52,314,314,314,6',
'196,314,314,314,189,267,316,237,314,314,314,314,314,314,314,314,314',
'314,314,314,314,314,47,317,46,306,314,314,314,314,315,315,53,315,318',
'315,315,315,315,237,79,0,0,0,306,315,79,86,162,46,47,47,315,315,315',
'315,315,315,315,315,315,260,315,315,315,315,315,315,315,315,315,315',
'86,162,54,315,315,315,300,55,315,315,315,149,149,326,260,315,315,315',
'315,315,315,315,315,315,315,315,315,315,315,320,320,300,320,315,315',
'315,315,34,326,34,56,34,76,34,320,34,383,384,385,78,34,320,320,320,320',
'320,320,320,320,320,80,320,320,320,320,320,320,320,320,320,320,383,384',
'385,320,320,320,165,165,320,320,320,34,184,184,82,320,320,320,320,320',
'320,320,320,320,320,320,320,320,320,356,356,83,356,320,320,320,320,84',
'30,30,30,30,34,90,356,30,30,30,185,185,91,356,356,356,356,356,356,356',
'356,356,92,356,356,356,356,356,356,356,356,356,356,186,186,93,356,356',
'356,192,192,356,356,356,31,31,94,31,356,356,356,356,356,356,356,356',
'356,356,356,356,356,356,375,375,95,375,356,356,356,356,96,145,145,145',
'145,193,193,375,145,145,145,194,194,97,375,375,375,375,375,375,375,375',
'375,98,375,375,375,375,375,375,375,375,375,375,252,252,99,375,375,375',
'257,257,375,375,375,262,262,337,337,375,375,375,375,375,375,375,375',
'375,375,375,375,375,375,357,357,358,358,375,375,375,375,386,386,100',
'386,101,386,386,386,386,362,362,367,367,369,369,386,374,374,390,390',
'391,391,386,386,386,386,386,386,386,386,386,102,386,386,386,386,386',
'386,386,386,386,386,393,393,103,386,386,386,394,394,386,386,386,117',
'127,128,129,386,386,386,386,386,386,386,386,386,386,386,386,386,386',
'408,408,131,408,386,386,386,386,133,136,137,143,172,191,195,408,197',
'198,200,205,228,229,408,408,408,408,408,408,408,408,408,230,408,408',
'408,408,408,408,408,408,408,408,232,233,236,408,408,408,240,243,408',
'408,408,244,245,246,247,408,408,408,408,408,408,408,408,408,408,408',
'408,408,408,249,253,255,271,408,408,408,408,50,275,277,50,50,50,50,278',
'282,296,50,50,50,297,50,50,50,298,50,323,50,50,50,50,50,50,50,50,50',
'50,50,50,50,50,50,50,50,50,50,50,328,50,346,348,349,50,350,50,351,50',
'50,353,355,359,363,368,50,50,50,50,50,50,50,370,380,387,50,50,50,388',
'389,398,400,50,50,50,50,139,403,405,139,139,139,139,409,,,139,139,139',
',139,,139,,139,,139,139,139,139,139,139,139,139,139,139,139,139,139',
'139,139,139,139,139,139,139,,139,,,,139,,,,,,,,,,,139,139,139,139,139',
'139,139,,,,139,139,139,,,,,139,139,139,139,161,,,161,161,161,161,,,',
'161,161,161,,161,161,161,,161,,161,161,161,161,161,161,161,161,161,161',
'161,161,161,161,161,161,161,161,161,161,,161,,,,161,,161,,161,161,,',
',,,161,161,161,161,161,161,161,,,,161,161,161,,,,,161,161,161,161,173',
',,173,173,173,173,,,,173,173,173,,173,173,173,,173,,173,173,173,173',
'173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,,173',
',,,173,,173,,173,173,,,,,,173,173,173,173,173,173,173,,,,173,173,173',
',,,,173,173,173,173,174,,,174,174,174,174,,,,174,174,174,,174,174,174',
',174,,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174',
'174,174,174,174,,174,,,,174,,174,,174,174,,,,,,174,174,174,174,174,174',
'174,,,,174,174,174,,,,,174,174,174,174,175,,,175,175,175,175,,,,175',
'175,175,,175,175,175,,175,,175,175,175,175,175,175,175,175,175,175,175',
'175,175,175,175,175,175,175,175,175,,175,,,,175,,175,,,175,,,,,,175',
'175,175,175,175,175,175,,,,175,175,175,,,,,175,175,175,175,241,,,241',
'241,241,241,,,,241,241,241,,241,241,241,,241,,241,241,241,241,241,241',
'241,241,241,241,241,241,241,241,241,241,241,241,241,241,125,241,125',
',,241,,241,,,241,,,,,,241,241,241,241,241,241,241,178,,178,241,241,241',
'176,176,176,176,241,241,241,241,,,,,,,,125,125,176,176,176,176,176,176',
'176,176,176,,176,176,176,176,176,176,176,176,176,176,125,178,178,,,',
',176,,,176,,,,,,176,176,176,176,176,176,176,178,,,176,176,176,177,177',
'177,177,176,176,176,176,,,,,,,,,,177,177,177,177,177,177,177,177,177',
',177,177,177,177,177,177,177,177,177,177,180,,180,,,,,177,,,177,,,,',
',177,177,177,177,177,177,177,181,,181,177,177,177,207,207,207,207,177',
'177,177,177,,,,,,,,180,180,207,207,207,207,207,207,207,207,207,,207',
'207,207,207,207,207,207,207,207,207,180,181,181,182,77,182,224,77,224',
'77,,,,,,,207,207,207,207,207,207,207,181,,,207,207,207,77,,,,207,207',
'207,207,,,,77,,,,,,,182,182,,224,224,266,,266,,266,,266,,,266,266,266',
'274,,274,,274,182,274,,224,274,274,274,,,,281,,281,266,281,,281,,,281',
'281,281,266,266,,274,266,,,,,,,,274,274,,325,274,325,281,325,266,325',
',,325,325,325,281,281,,,281,274,,,,,,,,,,,,,325,,281,,,,,,,325,325,',
'2,325,,,,,,,,,2,2,2,,2,,2,325,2,,2,2,2,2,2,2,2,2,2,2,2,2,2,2,,,25,,',
',,2,,,,2,25,25,25,,25,,25,25,25,,25,25,25,25,25,25,25,25,25,25,25,25',
'25,25,,,26,,,,,25,,,,25,26,26,26,,26,,26,,26,,26,26,26,26,26,26,26,26',
'26,26,26,26,26,26,,,40,,,,,26,,,,26,40,40,40,,40,,40,,40,,40,40,40,40',
'40,40,40,40,40,40,40,40,40,40,,,41,,,,,40,,,,40,41,41,41,,41,,41,,41',
',41,41,41,41,41,41,41,41,41,41,41,41,41,41,,,43,,,,,41,,,,41,43,43,43',
',43,,43,,43,,43,43,43,43,43,43,43,43,43,43,43,43,43,43,,,51,,,,,43,',
',,43,51,51,51,,51,,51,,51,,51,51,51,51,51,51,51,51,51,51,51,51,51,51',
',,57,,,,,51,,,,51,57,57,57,,57,,57,,57,,57,57,57,57,57,57,57,57,57,57',
'57,57,57,57,,,88,,,,,57,,,,57,88,88,88,,88,,88,,88,,88,88,88,88,88,88',
'88,88,88,88,88,88,88,88,,,140,,,,,88,,,,88,140,140,140,,140,,140,,140',
',140,140,140,140,140,140,140,140,140,140,140,140,140,140,,,141,,,,,140',
',,,140,141,141,141,,141,,141,,141,,141,141,141,141,141,141,141,141,141',
'141,141,141,141,141,,,142,,,,,141,,,,141,142,142,142,,142,,142,,142',
',142,142,142,142,142,142,142,142,142,142,142,142,142,142,,,146,,,,,142',
',,,142,146,146,146,,146,,146,,146,,146,146,146,146,146,146,146,146,146',
'146,146,146,146,146,,,147,,,,,146,,,,146,147,147,147,,147,,147,,147',
',147,147,147,147,147,147,147,147,147,147,147,147,147,147,,,148,,,,,147',
',,,147,148,148,148,,148,,148,,148,,148,148,148,148,148,148,148,148,148',
'148,148,148,148,148,,,156,,,,,148,,,,148,156,156,156,,156,,156,,156',
',156,156,156,156,156,156,156,156,156,156,156,156,156,156,,,157,,,,,156',
',,,156,157,157,157,,157,,157,,157,,157,157,157,157,157,157,157,157,157',
'157,157,157,157,157,,,159,,,,,157,,,,157,159,159,159,,159,,159,,159',
',159,159,159,159,159,159,159,159,159,159,159,159,159,159,,,179,,,,,159',
',,,159,179,179,179,,179,,179,,179,,179,179,179,179,179,179,179,179,179',
'179,179,179,179,179,,,201,,,,,179,,,,179,201,201,201,,201,,201,,201',
',201,201,201,201,201,201,201,201,201,201,201,201,201,201,,,234,,,,,201',
',,,201,234,234,234,,234,,234,,234,,234,234,234,234,234,234,234,234,234',
'234,234,234,234,234,,,235,,,,,234,,,,234,235,235,235,,235,,235,,235',
',235,235,235,235,235,235,235,235,235,235,235,235,235,235,,,268,,,,,235',
',,,235,268,268,268,,268,,268,,268,,268,268,268,268,268,268,268,268,268',
'268,268,268,268,268,,,309,,,,,268,,,,268,309,309,309,,309,,309,,309',
',309,309,309,309,309,309,309,309,309,309,309,309,309,309,,,321,,,,,309',
',,,309,321,321,321,,321,,321,,321,,321,321,321,321,321,321,321,321,321',
'321,321,321,321,321,,,322,,,,,321,,,,321,322,322,322,,322,,322,,322',
',322,322,322,322,322,322,322,322,322,322,322,322,322,322,,,327,,,,,322',
',,,322,327,327,327,,327,,327,,327,,327,327,327,327,327,327,327,327,327',
'327,327,327,327,327,,,345,,,,,327,,,,327,345,345,345,,345,,345,,345',
',345,345,345,345,345,345,345,345,345,345,345,345,345,345,,,347,,,,,345',
',,,345,347,347,347,,347,,347,,347,,347,347,347,347,347,347,347,347,347',
'347,347,347,347,347,,,371,,,,,347,,,,347,371,371,371,,371,,371,,371',
',371,371,371,371,371,371,371,371,371,371,371,371,371,371,,,372,,,,,371',
',,,371,372,372,372,,372,,372,,372,,372,372,372,372,372,372,372,372,372',
'372,372,372,372,372,,,373,,,,,372,,,,372,373,373,373,,373,,373,,373',
',373,373,373,373,373,373,373,373,373,373,373,373,373,373,,,377,,,,,373',
',,,373,377,377,377,,377,,377,,377,,377,377,377,377,377,377,377,377,377',
'377,377,377,377,377,,,378,,,,,377,,,,377,378,378,378,,378,,378,,378',
',378,378,378,378,378,378,378,378,378,378,378,378,378,378,,,381,,,,,378',
',,,378,381,381,381,,381,,381,,381,,381,381,381,381,381,381,381,381,381',
'381,381,381,381,381,,,382,,,,,381,,,,381,382,382,382,,382,,382,,382',
',382,382,382,382,382,382,382,382,382,382,382,382,382,382,283,,,283,',
'283,,382,283,,,382,,,,,,,,,,,,,,283,,283,283,283,283,283,,,,283,283' ]
        racc_action_check = arr = ::Array.new(2779, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    96,     4,  1444,   nil,   nil,     9,    51,   -35,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    51,  1480,  1516,    56,    -1,   nil,
   302,   351,    79,   nil,   237,    12,    80,   nil,   nil,   nil,
  1552,  1588,   nil,  1624,   -27,   nil,   131,   131,    -2,   nil,
   596,  1660,   100,   114,   147,   152,   185,  1696,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   229,  1269,   205,   166,
   216,   nil,   267,   300,   260,   nil,   154,   nil,  1732,   nil,
   295,   319,   287,   300,   311,   329,   335,   348,   358,   371,
   408,   410,   437,   476,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   459,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  1099,   nil,   460,   486,   460,
   nil,   477,   nil,   483,   nil,   nil,   484,   485,   nil,   673,
  1768,  1804,  1840,   481,   nil,   373,  1876,  1912,  1948,   164,
   nil,   nil,   nil,   nil,   nil,     8,  1984,  2020,   nil,  2056,
    22,   750,   155,   nil,   nil,   230,   nil,   nil,   nil,   nil,
   nil,   nil,   483,   827,   904,   981,  1124,  1190,  1122,  2092,
  1231,  1254,  1300,   nil,   236,   272,   295,     9,    10,    87,
    27,   478,   301,   337,   343,   485,    78,   515,   519,   nil,
   537,  2128,   nil,   nil,   nil,   494,   nil,  1256,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1303,   nil,   nil,   nil,   521,   522,
   532,    44,   543,   559,  2164,  2200,   542,   117,   nil,   nil,
   518,  1058,   nil,   552,   515,   496,   532,   531,   nil,   572,
   nil,   nil,   366,   542,   nil,   571,   nil,   417,   nil,    52,
   168,   nil,   347,   nil,   nil,    77,  1350,    88,  2236,    29,
   nil,   576,   nil,   nil,  1362,   581,   nil,   523,   605,   nil,
   nil,  1377,   562,  2707,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   565,   569,   560,   nil,
   185,   nil,   nil,   nil,   nil,   nil,   110,   nil,   nil,  2272,
   nil,   nil,   nil,    -2,    77,   156,    89,   106,   117,   -62,
   227,  2308,  2344,   608,   nil,  1404,   192,  2380,   622,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   375,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  2416,   624,  2452,   625,   624,
   626,   628,   nil,   612,   nil,   595,   298,   395,   397,   609,
   nil,   nil,   412,   610,     0,   nil,   nil,   414,   611,   416,
   619,  2488,  2524,  2560,   434,   369,   nil,  2596,  2632,   nil,
   645,  2668,  2704,   225,   226,   227,   448,   608,   612,   638,
   421,   423,   nil,   445,   451,   nil,   nil,   nil,   613,   nil,
   628,   nil,   nil,   621,   nil,   632,   nil,   nil,   519,   626,
   nil,   nil ]

racc_action_default = [
  -243,  -243,  -239,    -6,   -16,  -243,    -4,  -160,  -163,  -164,
  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,
  -175,  -176,  -177,  -178,  -179,  -239,  -239,  -243,  -243,  -187,
  -243,  -243,  -240,  -242,   -17,    -4,  -150,   412,    -1,    -5,
  -239,  -239,  -186,  -239,  -188,  -181,  -243,  -243,  -239,  -185,
  -239,  -239,  -243,  -191,  -243,  -243,  -243,  -239,  -199,  -200,
  -201,  -202,  -233,  -234,  -235,  -236,  -241,    -2,    -7,    -8,
    -9,   -10,   -11,   -12,   -13,   -14,   -17,  -243,  -243,  -243,
  -243,    -3,   -82,  -243,  -161,  -162,  -243,  -182,  -239,  -183,
  -243,  -243,  -173,  -163,  -167,  -174,  -175,  -164,  -165,  -168,
  -169,  -172,  -166,  -118,  -119,  -120,  -121,  -122,  -123,  -124,
  -125,  -126,  -127,  -128,  -129,  -130,  -131,  -170,  -133,  -134,
  -135,  -136,  -137,  -138,  -139,  -229,  -197,  -243,  -243,  -206,
  -207,  -209,  -210,  -212,  -213,  -216,  -219,  -221,  -222,  -239,
  -239,  -239,  -239,  -204,  -190,  -243,  -239,  -239,  -239,  -196,
   -18,   -15,   -15,   -15,   -15,  -239,  -239,  -239,  -238,  -239,
   -84,  -239,  -243,  -152,  -180,  -189,  -184,  -223,  -230,  -231,
  -232,  -198,  -243,  -239,  -239,  -239,  -217,  -217,  -229,  -239,
  -229,  -229,  -229,  -192,  -193,  -194,  -195,  -239,  -239,  -239,
  -239,  -243,  -157,  -158,  -159,  -243,  -243,  -243,  -243,  -151,
  -243,  -239,  -205,  -213,  -208,  -215,  -211,  -243,  -107,  -108,
  -109,  -110,  -111,  -112,  -113,  -114,  -115,  -116,  -117,  -118,
  -132,  -218,  -220,  -224,  -229,  -225,  -226,  -228,  -150,  -140,
  -140,  -239,  -140,  -243,  -239,  -239,  -243,  -243,   -83,  -153,
  -203,  -239,  -227,  -243,   -23,  -148,   -28,   -34,   -30,   -33,
   -59,  -237,  -156,   -81,   -85,  -243,  -214,  -243,   -34,  -239,
  -243,  -142,  -145,  -149,   -34,  -239,   -17,  -239,  -239,   -17,
   -86,  -243,   -20,   -21,   -17,   -24,  -141,  -148,  -243,  -146,
  -147,   -17,   -29,   -73,   -27,   -35,   -36,   -37,   -38,   -39,
   -40,   -41,   -42,   -43,   -44,   -45,  -243,  -243,  -243,   -31,
  -243,   -58,   -60,   -61,   -62,   -63,   -73,   -34,   -22,  -239,
  -143,  -144,   -26,  -243,  -243,  -243,  -239,  -239,  -239,   -70,
  -243,  -239,  -239,  -243,   -32,   -17,  -243,  -239,   -52,   -89,
   -90,   -91,   -92,   -93,   -94,   -95,   -96,   -97,  -100,  -101,
  -102,  -103,  -104,  -105,  -106,  -239,   -52,  -239,   -52,   -64,
   -66,   -68,   -71,  -243,   -74,  -132,  -243,   -55,   -56,  -243,
   -19,   -25,   -46,  -243,  -243,   -98,   -99,   -48,  -243,   -50,
  -243,  -239,  -239,  -239,   -75,  -243,  -154,  -239,  -239,   -53,
  -243,  -239,  -239,  -243,  -243,  -243,  -243,  -243,  -243,  -243,
   -57,   -47,   -54,   -49,   -51,   -65,   -67,   -69,   -16,   -87,
  -243,   -76,   -77,  -243,   -72,   -78,   -79,   -88,  -243,   -16,
  -155,   -80 ]

racc_goto_table = [
     6,    57,    77,    46,    82,   191,    49,   128,    79,    90,
   143,    52,   167,   247,   179,   203,     1,   206,   328,   346,
   348,    86,    91,    38,    47,   356,   261,   344,   344,   344,
   205,   205,   266,    34,   344,   404,   363,    35,    84,    85,
   221,   222,    68,   274,   150,   271,   411,   282,   125,   281,
   258,    67,    81,   264,   368,   149,   370,   299,   310,   244,
   246,   376,   250,   303,   304,   223,   305,   225,   226,   227,
   344,   187,   188,   189,   190,   232,   269,   302,   353,   386,
   389,   249,   179,   256,   398,   160,   165,   195,   260,   344,
   278,   400,   325,   162,   204,    62,   nil,   205,   nil,   nil,
   344,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   242,   nil,   410,   nil,   249,    57,   249,   198,   nil,
   nil,   nil,   344,   nil,   nil,   nil,   183,   nil,   nil,   nil,
   202,   nil,   nil,   nil,   nil,   nil,   nil,   178,   180,   181,
   182,   nil,   nil,   nil,   184,   185,   186,   nil,   228,   229,
   230,   nil,   nil,   nil,   192,   193,   nil,   194,   nil,   125,
   240,    91,    91,    91,   233,   nil,   349,   350,   351,   nil,
   nil,   125,   125,   125,   236,   nil,   nil,   224,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   253,   nil,   243,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   255,   nil,   nil,   nil,   nil,
   275,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   252,    91,   nil,   nil,   nil,   306,   nil,   125,
    79,   nil,   nil,   nil,   nil,   nil,   300,   nil,    79,   nil,
   nil,   nil,   nil,   nil,   nil,    79,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   327,   345,   347,   326,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    79,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   357,
   358,   nil,   nil,   nil,   nil,   362,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   367,   nil,   369,   nil,   nil,   nil,   383,
   384,   385,   nil,   nil,   nil,   nil,   nil,   399,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   390,   391,   nil,   nil,   393,
   394 ]

racc_goto_check = [
     2,    36,    16,    23,    18,    27,    51,    50,    59,    17,
    49,    61,    74,    25,    63,    69,     1,    69,    37,    37,
    37,    23,    59,     3,     2,    37,    55,    53,    53,    53,
    64,    64,    20,     4,    53,    46,    38,     5,     2,     2,
    70,    70,     6,    20,    16,    19,    46,    25,     2,    20,
    22,     3,     3,    24,    38,     2,    38,    26,    55,    21,
    21,    37,    21,    29,    30,    74,    35,    74,    74,    74,
    53,    14,    14,    14,    14,    39,    40,    41,    42,    44,
    37,    27,    63,    69,    45,    47,     2,    48,    54,    53,
    57,    37,    20,    58,    65,    75,   nil,    64,   nil,   nil,
    53,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    74,   nil,    37,   nil,    27,    36,    27,    50,   nil,
   nil,   nil,    53,   nil,   nil,   nil,    61,   nil,   nil,   nil,
    50,   nil,   nil,   nil,   nil,   nil,   nil,     2,     2,     2,
     2,   nil,   nil,   nil,     2,     2,     2,   nil,    17,    17,
    17,   nil,   nil,   nil,     2,     2,   nil,     2,   nil,     2,
    49,    59,    59,    59,    59,   nil,    27,    27,    27,   nil,
   nil,     2,     2,     2,    51,   nil,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    49,   nil,    18,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    51,   nil,   nil,   nil,   nil,
    17,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,    59,   nil,   nil,   nil,    16,   nil,     2,
    59,   nil,   nil,   nil,   nil,   nil,    23,   nil,    59,   nil,
   nil,   nil,   nil,   nil,   nil,    59,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    36,    36,    36,    23,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    59,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
     2,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,     2,   nil,   nil,   nil,    23,
    23,    23,   nil,   nil,   nil,   nil,   nil,    36,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,     2,   nil,   nil,     2,
     2 ]

racc_goto_pointer = [
   nil,    16,    -2,    17,    30,    33,     8,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   -80,   nil,   -32,   -39,   -32,  -212,
  -215,  -170,  -194,   -22,  -193,  -218,  -210,  -150,   nil,  -206,
  -205,   nil,   nil,   nil,   nil,  -203,   -29,  -295,  -292,  -115,
  -174,  -192,  -241,   nil,  -295,  -302,  -363,     3,   -73,   -41,
   -43,   -22,   nil,  -286,  -157,  -219,   nil,  -172,    10,   -26,
   nil,   -19,   nil,  -125,  -144,   -80,   nil,   nil,   nil,  -158,
  -136,   nil,   nil,   nil,  -113,    64 ]

racc_goto_default = [
   nil,   nil,    44,   nil,   nil,   405,   295,    69,    70,    71,
    72,    73,    74,    75,   nil,    36,   283,    78,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   248,    24,   285,   286,
   287,   288,   289,   290,   291,   294,   126,   nil,   nil,   nil,
   nil,   nil,   nil,   319,   nil,   nil,   nil,   nil,   nil,     7,
   nil,   nil,   337,   127,   nil,   nil,   262,   nil,   nil,    31,
    29,   nil,    53,   141,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 82, :_reduce_1,
  3, 82, :_reduce_2,
  3, 82, :_reduce_3,
  0, 84, :_reduce_none,
  1, 84, :_reduce_none,
  0, 85, :_reduce_6,
  2, 85, :_reduce_7,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  0, 95, :_reduce_15,
  0, 96, :_reduce_16,
  0, 97, :_reduce_17,
  2, 97, :_reduce_18,
  10, 94, :_reduce_19,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  8, 93, :_reduce_22,
  0, 103, :_reduce_23,
  2, 103, :_reduce_24,
  5, 103, :_reduce_25,
  8, 92, :_reduce_26,
  7, 92, :_reduce_27,
  0, 105, :_reduce_28,
  2, 105, :_reduce_29,
  1, 106, :_reduce_30,
  3, 106, :_reduce_31,
  4, 107, :_reduce_32,
  1, 107, :_reduce_33,
  0, 101, :_reduce_34,
  2, 101, :_reduce_35,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_42,
  1, 109, :_reduce_43,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  4, 115, :_reduce_46,
  6, 115, :_reduce_47,
  4, 115, :_reduce_48,
  6, 115, :_reduce_49,
  4, 115, :_reduce_50,
  6, 115, :_reduce_51,
  0, 119, :_reduce_52,
  2, 119, :_reduce_53,
  3, 119, :_reduce_54,
  3, 114, :_reduce_55,
  3, 114, :_reduce_56,
  5, 114, :_reduce_57,
  7, 91, :_reduce_58,
  0, 121, :_reduce_59,
  2, 121, :_reduce_60,
  1, 122, :_reduce_61,
  1, 122, :_reduce_62,
  1, 122, :_reduce_none,
  3, 111, :_reduce_64,
  6, 111, :_reduce_65,
  3, 112, :_reduce_66,
  6, 112, :_reduce_67,
  3, 113, :_reduce_68,
  6, 113, :_reduce_69,
  0, 123, :_reduce_70,
  1, 123, :_reduce_71,
  7, 110, :_reduce_72,
  0, 124, :_reduce_none,
  2, 124, :_reduce_74,
  0, 125, :_reduce_75,
  2, 125, :_reduce_76,
  2, 125, :_reduce_77,
  1, 127, :_reduce_78,
  1, 127, :_reduce_79,
  3, 127, :_reduce_80,
  6, 86, :_reduce_81,
  0, 128, :_reduce_82,
  3, 128, :_reduce_83,
  0, 129, :_reduce_84,
  3, 129, :_reduce_85,
  4, 129, :_reduce_86,
  1, 126, :_reduce_none,
  2, 126, :_reduce_88,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  2, 118, :_reduce_98,
  2, 118, :_reduce_99,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  0, 102, :_reduce_140,
  3, 102, :_reduce_141,
  1, 135, :_reduce_142,
  3, 135, :_reduce_143,
  3, 136, :_reduce_144,
  0, 138, :_reduce_145,
  1, 138, :_reduce_146,
  1, 138, :_reduce_147,
  0, 137, :_reduce_148,
  1, 137, :_reduce_149,
  0, 99, :_reduce_150,
  3, 99, :_reduce_151,
  1, 139, :_reduce_152,
  3, 139, :_reduce_153,
  4, 116, :_reduce_154,
  8, 116, :_reduce_155,
  5, 88, :_reduce_156,
  3, 89, :_reduce_157,
  3, 89, :_reduce_158,
  3, 90, :_reduce_159,
  1, 83, :_reduce_none,
  3, 83, :_reduce_161,
  3, 83, :_reduce_162,
  1, 130, :_reduce_163,
  1, 130, :_reduce_164,
  1, 130, :_reduce_165,
  1, 130, :_reduce_166,
  1, 130, :_reduce_167,
  1, 130, :_reduce_168,
  1, 130, :_reduce_169,
  1, 130, :_reduce_170,
  1, 130, :_reduce_171,
  1, 130, :_reduce_172,
  1, 130, :_reduce_173,
  1, 130, :_reduce_174,
  1, 130, :_reduce_175,
  1, 130, :_reduce_176,
  1, 130, :_reduce_177,
  1, 130, :_reduce_178,
  1, 130, :_reduce_179,
  4, 130, :_reduce_180,
  2, 130, :_reduce_181,
  3, 130, :_reduce_182,
  3, 130, :_reduce_183,
  4, 130, :_reduce_184,
  2, 130, :_reduce_185,
  2, 130, :_reduce_186,
  1, 130, :_reduce_none,
  1, 104, :_reduce_188,
  3, 104, :_reduce_189,
  3, 141, :_reduce_190,
  1, 142, :_reduce_191,
  3, 142, :_reduce_192,
  3, 143, :_reduce_193,
  3, 143, :_reduce_194,
  3, 143, :_reduce_195,
  2, 143, :_reduce_196,
  1, 144, :_reduce_none,
  2, 144, :_reduce_198,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  5, 132, :_reduce_203,
  2, 132, :_reduce_204,
  3, 131, :_reduce_205,
  1, 131, :_reduce_206,
  1, 131, :_reduce_none,
  3, 146, :_reduce_208,
  1, 146, :_reduce_209,
  1, 146, :_reduce_none,
  3, 148, :_reduce_211,
  1, 148, :_reduce_212,
  1, 148, :_reduce_none,
  3, 150, :_reduce_214,
  1, 150, :_reduce_215,
  1, 150, :_reduce_none,
  0, 151, :_reduce_217,
  3, 151, :_reduce_218,
  1, 151, :_reduce_219,
  3, 151, :_reduce_220,
  1, 151, :_reduce_221,
  1, 151, :_reduce_222,
  2, 145, :_reduce_223,
  3, 147, :_reduce_224,
  3, 149, :_reduce_225,
  3, 152, :_reduce_226,
  4, 153, :_reduce_227,
  3, 154, :_reduce_228,
  0, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  2, 108, :_reduce_233,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  2, 120, :_reduce_237,
  2, 98, :_reduce_238,
  0, 140, :_reduce_239,
  1, 140, :_reduce_240,
  2, 140, :_reduce_241,
  1, 140, :_reduce_242 ]

racc_reduce_n = 243

racc_shift_n = 412

racc_token_table = {
  false => 0,
  :error => 1,
  :tUIDENT => 2,
  :tLIDENT => 3,
  :tNAMESPACE => 4,
  :tINTERFACEIDENT => 5,
  :tGLOBALIDENT => 6,
  :tLKEYWORD => 7,
  :tUKEYWORD => 8,
  :tLKEYWORD_Q_E => 9,
  :tUKEYWORD_Q_E => 10,
  :tIVAR => 11,
  :tCLASSVAR => 12,
  :tANNOTATION => 13,
  :tSTRING => 14,
  :tSYMBOL => 15,
  :tINTEGER => 16,
  :tWRITE_ATTR => 17,
  :kLPAREN => 18,
  :kRPAREN => 19,
  :kLBRACKET => 20,
  :kRBRACKET => 21,
  :kLBRACE => 22,
  :kRBRACE => 23,
  :kVOID => 24,
  :kNIL => 25,
  :kTRUE => 26,
  :kFALSE => 27,
  :kANY => 28,
  :kUNTYPED => 29,
  :kTOP => 30,
  :kBOT => 31,
  :kSELF => 32,
  :kSELFQ => 33,
  :kINSTANCE => 34,
  :kCLASS => 35,
  :kBOOL => 36,
  :kSINGLETON => 37,
  :kTYPE => 38,
  :kDEF => 39,
  :kMODULE => 40,
  :kPRIVATE => 41,
  :kPUBLIC => 42,
  :kALIAS => 43,
  :kCOLON => 44,
  :kCOLON2 => 45,
  :kCOMMA => 46,
  :kBAR => 47,
  :kAMP => 48,
  :kHAT => 49,
  :kARROW => 50,
  :kQUESTION => 51,
  :kEXCLAMATION => 52,
  :kSTAR => 53,
  :kSTAR2 => 54,
  :kFATARROW => 55,
  :kEQ => 56,
  :kDOT => 57,
  :kDOT3 => 58,
  :kLT => 59,
  :kINTERFACE => 60,
  :kEND => 61,
  :kINCLUDE => 62,
  :kEXTEND => 63,
  :kATTRREADER => 64,
  :kATTRWRITER => 65,
  :kATTRACCESSOR => 66,
  :tOPERATOR => 67,
  :tQUOTEDMETHOD => 68,
  :tQUOTEDIDENT => 69,
  :kPREPEND => 70,
  :kEXTENSION => 71,
  :kINCOMPATIBLE => 72,
  :type_TYPE => 73,
  :type_SIGNATURE => 74,
  :type_METHODTYPE => 75,
  :tEOF => 76,
  :kOUT => 77,
  :kIN => 78,
  :kUNCHECKED => 79,
  :kOVERLOAD => 80 }

racc_nt_base = 81

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "tUIDENT",
  "tLIDENT",
  "tNAMESPACE",
  "tINTERFACEIDENT",
  "tGLOBALIDENT",
  "tLKEYWORD",
  "tUKEYWORD",
  "tLKEYWORD_Q_E",
  "tUKEYWORD_Q_E",
  "tIVAR",
  "tCLASSVAR",
  "tANNOTATION",
  "tSTRING",
  "tSYMBOL",
  "tINTEGER",
  "tWRITE_ATTR",
  "kLPAREN",
  "kRPAREN",
  "kLBRACKET",
  "kRBRACKET",
  "kLBRACE",
  "kRBRACE",
  "kVOID",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kANY",
  "kUNTYPED",
  "kTOP",
  "kBOT",
  "kSELF",
  "kSELFQ",
  "kINSTANCE",
  "kCLASS",
  "kBOOL",
  "kSINGLETON",
  "kTYPE",
  "kDEF",
  "kMODULE",
  "kPRIVATE",
  "kPUBLIC",
  "kALIAS",
  "kCOLON",
  "kCOLON2",
  "kCOMMA",
  "kBAR",
  "kAMP",
  "kHAT",
  "kARROW",
  "kQUESTION",
  "kEXCLAMATION",
  "kSTAR",
  "kSTAR2",
  "kFATARROW",
  "kEQ",
  "kDOT",
  "kDOT3",
  "kLT",
  "kINTERFACE",
  "kEND",
  "kINCLUDE",
  "kEXTEND",
  "kATTRREADER",
  "kATTRWRITER",
  "kATTRACCESSOR",
  "tOPERATOR",
  "tQUOTEDMETHOD",
  "tQUOTEDIDENT",
  "kPREPEND",
  "kEXTENSION",
  "kINCOMPATIBLE",
  "type_TYPE",
  "type_SIGNATURE",
  "type_METHODTYPE",
  "tEOF",
  "kOUT",
  "kIN",
  "kUNCHECKED",
  "kOVERLOAD",
  "$start",
  "target",
  "type",
  "eof",
  "signatures",
  "method_type",
  "signature",
  "type_decl",
  "const_decl",
  "global_decl",
  "interface_decl",
  "module_decl",
  "class_decl",
  "extension_decl",
  "start_new_scope",
  "start_merged_scope",
  "annotations",
  "class_name",
  "type_params",
  "extension_name",
  "class_members",
  "module_type_params",
  "super_class",
  "type_list",
  "colon_module_self_types",
  "module_self_types",
  "module_self_type",
  "qualified_name",
  "class_member",
  "method_member",
  "include_member",
  "extend_member",
  "prepend_member",
  "var_type_member",
  "attribute_member",
  "alias_member",
  "keyword",
  "method_name",
  "attr_var_opt",
  "interface_name",
  "interface_members",
  "interface_member",
  "overload",
  "attributes",
  "method_kind",
  "def_name",
  "method_types",
  "params_opt",
  "block_opt",
  "simple_type",
  "params",
  "function_type",
  "method_name0",
  "identifier_keywords",
  "module_type_params0",
  "module_type_param",
  "type_param_check",
  "type_param_variance",
  "type_params0",
  "namespace",
  "record_type",
  "record_fields",
  "record_field",
  "keyword_name",
  "required_positional",
  "optional_positional_params",
  "optional_positional",
  "rest_positional_param",
  "rest_positional",
  "trailing_positional_params",
  "keyword_params",
  "required_keyword",
  "optional_keyword",
  "rest_keyword",
  "var_name_opt",
  "simple_name" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_1(val, _values, result)
            result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_2(val, _values, result)
            result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_3(val, _values, result)
            result = val[1]

    result
  end
.,.,

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_6(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_7(val, _values, result)
            result = val[0].push(val[1])

    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_15(val, _values, result)
     start_new_variables_scope
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_16(val, _values, result)
     start_merged_variables_scope
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_17(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_18(val, _values, result)
            result = val[1].unshift(Annotation.new(string: val[0].value, location: val[0].location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_19(val, _values, result)
            reset_variable_scope

        location = val[1].location + val[9].location
        result = Declarations::Extension.new(
          name: val[3].value,
          type_params: val[4]&.value || [],
          extension_name: val[6].value.to_sym,
          members: val[8],
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || location)
        )

    result
  end
.,.,

# reduce 20 omitted

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_22(val, _values, result)
            reset_variable_scope

        location = val[1].location + val[7].location
        result = Declarations::Class.new(
          name: val[3].value,
          type_params: val[4]&.value || Declarations::ModuleTypeParams.empty,
          super_class: val[5],
          members: val[6],
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 98)
  def _reduce_23(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 100)
  def _reduce_24(val, _values, result)
            result = Declarations::Class::Super.new(name: val[1].value,
                                                args: [])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 104)
  def _reduce_25(val, _values, result)
            result = Declarations::Class::Super.new(name: val[1].value,
                                                args: val[3])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 110)
  def _reduce_26(val, _values, result)
            reset_variable_scope

        location = val[1].location + val[7].location
        result = Declarations::Module.new(
          name: val[3].value,
          type_params: val[4]&.value || Declarations::ModuleTypeParams.empty,
          self_types: val[5],
          members: val[6],
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 124)
  def _reduce_27(val, _values, result)
            reset_variable_scope

        location = val[1].location + val[6].location
        result = Declarations::Module.new(
          name: val[3].value,
          type_params: Declarations::ModuleTypeParams.empty,
          self_types: val[4],
          members: val[5],
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 139)
  def _reduce_28(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 141)
  def _reduce_29(val, _values, result)
            result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 146)
  def _reduce_30(val, _values, result)
            result = [val[0]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 149)
  def _reduce_31(val, _values, result)
            result = val[0].push(val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 154)
  def _reduce_32(val, _values, result)
            name = val[0].value
        args = val[2]
        location = val[0].location + val[3].location

        case
        when name.class?
          result = Declarations::Module::Self.new(name: name, args: args, location: location)
        when name.interface?
          result = Declarations::Module::Self.new(name: name, args: args, location: location)
        else
          raise SemanticsError.new("Module self type should be instance or interface", subject: val[0], location: val[0].location)
        end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 168)
  def _reduce_33(val, _values, result)
            name = val[0].value
        args = []
        location = val[0].location

        case
        when name.class?
          result = Declarations::Module::Self.new(name: name, args: args, location: location)
        when name.interface?
          result = Declarations::Module::Self.new(name: name, args: args, location: location)
        else
          raise SemanticsError.new("Module self type should be instance or interface", subject: val[0], location: val[0].location)
        end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 183)
  def _reduce_34(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 185)
  def _reduce_35(val, _values, result)
            result = val[0].push(val[1])

    result
  end
.,.,

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.y', 196)
  def _reduce_42(val, _values, result)
            result = Members::Public.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 199)
  def _reduce_43(val, _values, result)
            result = Members::Private.new(location: val[0].location)

    result
  end
.,.,

# reduce 44 omitted

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.y', 206)
  def _reduce_46(val, _values, result)
            location = val[1].location + val[3].location
        result = Members::AttrReader.new(name: val[2].value,
                                         ivar_name: nil,
                                         type: val[3],
                                         annotations: val[0],
                                         location: location,
                                         comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 215)
  def _reduce_47(val, _values, result)
            location = val[1].location + val[5].location
        result = Members::AttrReader.new(name: val[2].value.to_sym,
                                         ivar_name: val[3],
                                         type: val[5],
                                         annotations: val[0],
                                         location: location,
                                         comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 224)
  def _reduce_48(val, _values, result)
            location = val[1].location + val[3].location
        result = Members::AttrWriter.new(name: val[2].value,
                                         ivar_name: nil,
                                         type: val[3],
                                         annotations: val[0],
                                         location: location,
                                         comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 233)
  def _reduce_49(val, _values, result)
            location = val[1].location + val[5].location
        result = Members::AttrWriter.new(name: val[2].value.to_sym,
                                         ivar_name: val[3],
                                         type: val[5],
                                         annotations: val[0],
                                         location: location,
                                         comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 242)
  def _reduce_50(val, _values, result)
            location = val[1].location + val[3].location
        result = Members::AttrAccessor.new(name: val[2].value,
                                           ivar_name: nil,
                                           type: val[3],
                                           annotations: val[0],
                                           location: location,
                                           comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 251)
  def _reduce_51(val, _values, result)
            location = val[1].location + val[5].location
        result = Members::AttrAccessor.new(name: val[2].value.to_sym,
                                           ivar_name: val[3],
                                           type: val[5],
                                           annotations: val[0],
                                           location: location,
                                           comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 261)
  def _reduce_52(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 262)
  def _reduce_53(val, _values, result)
     result = false
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 263)
  def _reduce_54(val, _values, result)
     result = val[1].value
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 267)
  def _reduce_55(val, _values, result)
            location = val[0].location + val[2].location
        result = Members::InstanceVariable.new(
          name: val[0].value,
          type: val[2],
          location: location,
          comment: leading_comment(location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 276)
  def _reduce_56(val, _values, result)
            type = val[2]

        if type.is_a?(Types::Variable)
          type = Types::ClassInstance.new(
            name: TypeName.new(name: type.name, namespace: Namespace.empty),
            args: [],
            location: type.location
          )
        end

        location = val[0].location + val[2].location
        result = Members::ClassVariable.new(
          name: val[0].value,
          type: type,
          location: location,
          comment: leading_comment(location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 295)
  def _reduce_57(val, _values, result)
          type = val[4]

      if type.is_a?(Types::Variable)
        type = Types::ClassInstance.new(
          name: TypeName.new(name: type.name, namespace: Namespace.empty),
          args: [],
          location: type.location
        )
      end

      location = val[0].location + val[4].location
      result = Members::ClassInstanceVariable.new(
        name: val[2].value,
        type: type,
        location: location,
        comment: leading_comment(location)
      )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 316)
  def _reduce_58(val, _values, result)
            reset_variable_scope

        location = val[1].location + val[6].location
        result = Declarations::Interface.new(
          name: val[3].value,
          type_params: val[4]&.value || Declarations::ModuleTypeParams.empty,
          members: val[5],
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 330)
  def _reduce_59(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 332)
  def _reduce_60(val, _values, result)
            result = val[0].push(val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 337)
  def _reduce_61(val, _values, result)
            unless val[0].kind == :instance
          raise SemanticsError.new("Interface cannot have singleton method", subject: val[0], location: val[0].location)
        end

        if val[0].types.last == :super
          raise SemanticsError.new("Interface method cannot have `super` type", subject: val[0], location: val[0].location)
        end

        result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 348)
  def _reduce_62(val, _values, result)
            unless val[0].name.interface?
          raise SemanticsError.new("Interface should include an interface", subject: val[0], location: val[0].location)
        end

        result = val[0]

    result
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.y', 358)
  def _reduce_64(val, _values, result)
            if val[2].value.alias?
          raise SemanticsError.new("Should include module or interface", subject: val[2].value, location: val[2].location)
        end
        location = val[1].location + val[2].location
        result = Members::Include.new(name: val[2].value,
                                      args: [],
                                      annotations: val[0],
                                      location: location,
                                      comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 369)
  def _reduce_65(val, _values, result)
            if val[2].value.alias?
          raise SemanticsError.new("Should include module or interface", subject: val[2].value, location: val[2].location)
        end
        location = val[1].location + val[5].location
        result = Members::Include.new(name: val[2].value,
                                      args: val[4],
                                      annotations: val[0],
                                      location: location,
                                      comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 382)
  def _reduce_66(val, _values, result)
            if val[2].value.alias?
          raise SemanticsError.new("Should extend module or interface", subject: val[2].value, location: val[2].location)
        end
        location = val[1].location + val[2].location
        result = Members::Extend.new(name: val[2].value,
                                     args: [],
                                     annotations: val[0],
                                     location: location,
                                     comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 393)
  def _reduce_67(val, _values, result)
            if val[2].value.alias?
          raise SemanticsError.new("Should extend module or interface", subject: val[2].value, location: val[2].location)
        end
        location = val[1].location + val[5].location
        result = Members::Extend.new(name: val[2].value,
                                     args: val[4],
                                     annotations: val[0],
                                     location: location,
                                     comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 406)
  def _reduce_68(val, _values, result)
            unless val[2].value.class?
          raise SemanticsError.new("Should prepend module", subject: val[2].value, location: val[2].location)
        end
        location = val[1].location + val[2].location
        result = Members::Prepend.new(name: val[2].value,
                                      args: [],
                                      annotations: val[0],
                                      location: location,
                                      comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 417)
  def _reduce_69(val, _values, result)
            unless val[2].value.class?
          raise SemanticsError.new("Should prepend module", subject: val[2].value, location: val[2].location)
        end
        location = val[1].location + val[5].location
        result = Members::Prepend.new(name: val[2].value,
                                      args: val[4],
                                      annotations: val[0],
                                      location: location,
                                      comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 429)
  def _reduce_70(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 431)
  def _reduce_71(val, _values, result)
            RBS.logger.warn "`overload def` syntax is deprecated. Use `...` syntax instead."
        result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 437)
  def _reduce_72(val, _values, result)
            location = val[3].location + val[6].last.location

        last_type = val[6].last
        if last_type.is_a?(LocatedValue) && last_type.value == :dot3
          overload = true
          val[6].pop
        else
          overload = false
        end

        result = Members::MethodDefinition.new(
          name: val[5].value,
          kind: val[4],
          types: val[6],
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || val[2]&.location || val[3].location),
          overload: overload || !!val[2]
        )

    result
  end
.,.,

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.y', 460)
  def _reduce_74(val, _values, result)
            RBS.logger.warn "`incompatible` method attribute is deprecated and ignored."

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 464)
  def _reduce_75(val, _values, result)
     result = :instance
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 465)
  def _reduce_76(val, _values, result)
     result = :singleton
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 466)
  def _reduce_77(val, _values, result)
     result = :singleton_instance
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 469)
  def _reduce_78(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 470)
  def _reduce_79(val, _values, result)
     result = [LocatedValue.new(value: :dot3, location: val[0].location)]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 472)
  def _reduce_80(val, _values, result)
            result = val[2].unshift(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 477)
  def _reduce_81(val, _values, result)
            reset_variable_scope

        location = (val[1] || val[2] || val[3] || val[4]).location + val[5].location
        type_params = val[1]&.value || []

        params = val[2]&.value || empty_params_result

        type = Types::Function.new(
          required_positionals: params[0],
          optional_positionals: params[1],
          rest_positionals: params[2],
          trailing_positionals: params[3],
          required_keywords: params[4],
          optional_keywords: params[5],
          rest_keywords: params[6],
          return_type: val[5]
        )

        block = val[3]&.value

        result = MethodType.new(type_params: type_params,
                                type: type,
                                block: block,
                                location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 504)
  def _reduce_82(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 506)
  def _reduce_83(val, _values, result)
            result = LocatedValue.new(value: val[1], location: val[0].location + val[2].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 510)
  def _reduce_84(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 512)
  def _reduce_85(val, _values, result)
            block = MethodType::Block.new(type: val[1].value, required: true)
        result = LocatedValue.new(value: block, location: val[0].location + val[2].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 516)
  def _reduce_86(val, _values, result)
            block = MethodType::Block.new(type: val[2].value, required: false)
        result = LocatedValue.new(value: block, location: val[0].location + val[3].location)

    result
  end
.,.,

# reduce 87 omitted

module_eval(<<'.,.,', 'parser.y', 523)
  def _reduce_88(val, _values, result)
            result = LocatedValue.new(value: val[0].value.to_sym,
                                  location: val[0].location + val[1].location)

    result
  end
.,.,

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

module_eval(<<'.,.,', 'parser.y', 532)
  def _reduce_98(val, _values, result)
            unless val[0].location.pred?(val[1].location)
          raise SyntaxError.new(token_str: "kQUESTION", error_value: val[1])
        end

        result = LocatedValue.new(value: "#{val[0].value}?",
                                  location: val[0].location + val[1].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 540)
  def _reduce_99(val, _values, result)
            unless val[0].location.pred?(val[1].location)
          raise SyntaxError.new(token_str: "kEXCLAMATION", error_value: val[1])
        end

        result = LocatedValue.new(value: "#{val[0].value}!",
                                  location: val[0].location + val[1].location)

    result
  end
.,.,

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

module_eval(<<'.,.,', 'parser.y', 560)
  def _reduce_140(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 562)
  def _reduce_141(val, _values, result)
            val[1].each {|p| insert_bound_variable(p.name) }

        result = LocatedValue.new(value: val[1], location: val[0].location + val[2].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 569)
  def _reduce_142(val, _values, result)
            result = Declarations::ModuleTypeParams.new()
        result.add(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 573)
  def _reduce_143(val, _values, result)
            result = val[0].add(val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 578)
  def _reduce_144(val, _values, result)
            result = Declarations::ModuleTypeParams::TypeParam.new(name: val[2].value.to_sym,
                                                               variance: val[1],
                                                               skip_validation: val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 584)
  def _reduce_145(val, _values, result)
     result = :invariant
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 585)
  def _reduce_146(val, _values, result)
     result = :covariant
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 586)
  def _reduce_147(val, _values, result)
     result = :contravariant
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 589)
  def _reduce_148(val, _values, result)
     result = false
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 590)
  def _reduce_149(val, _values, result)
     result = true
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 593)
  def _reduce_150(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 595)
  def _reduce_151(val, _values, result)
            val[1].each {|var| insert_bound_variable(var) }

        result = LocatedValue.new(value: val[1],
                                  location: val[0].location + val[2].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 603)
  def _reduce_152(val, _values, result)
            result = [val[0].value.to_sym]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 606)
  def _reduce_153(val, _values, result)
            result = val[0].push(val[2].value.to_sym)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 611)
  def _reduce_154(val, _values, result)
            location = val[1].location + val[3].location
        result = Members::Alias.new(
          new_name: val[2].value.to_sym,
          old_name: val[3].value.to_sym,
          kind: :instance,
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 622)
  def _reduce_155(val, _values, result)
            location = val[1].location + val[7].location
        result = Members::Alias.new(
          new_name: val[4].value.to_sym,
          old_name: val[7].value.to_sym,
          kind: :singleton,
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 635)
  def _reduce_156(val, _values, result)
            location = val[1].location + val[4].location
        result = Declarations::Alias.new(name: val[2].value,
                                         type: val[4],
                                         annotations: val[0],
                                         location: location,
                                         comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 645)
  def _reduce_157(val, _values, result)
            location = val[0].location + val[2].location
        result = Declarations::Constant.new(name: val[0].value,
                                            type: val[2],
                                            location: location,
                                            comment: leading_comment(location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 652)
  def _reduce_158(val, _values, result)
            location = (val[0] || val[1]).location + val[2].location
        name = TypeName.new(name: val[1].value, namespace: val[0]&.value || Namespace.empty)
        result = Declarations::Constant.new(name: name,
                                            type: val[2],
                                            location: location,
                                            comment: leading_comment(location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 662)
  def _reduce_159(val, _values, result)
            location = val[0].location + val[2].location
        result = Declarations::Global.new(name: val[0].value.to_sym,
                                          type: val[2],
                                          location: location,
                                          comment: leading_comment(location))

    result
  end
.,.,

# reduce 160 omitted

module_eval(<<'.,.,', 'parser.y', 672)
  def _reduce_161(val, _values, result)
            types = case l = val[0]
                when Types::Union
                  l.types + [val[2]]
                else
                  [l, val[2]]
                end

        result = Types::Union.new(types: types, location: val[0].location + val[2].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 682)
  def _reduce_162(val, _values, result)
            types = case l = val[0]
                when Types::Intersection
                  l.types + [val[2]]
                else
                  [l, val[2]]
                end

        result = Types::Intersection.new(types: types,
                                         location: val[0].location + val[2].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 695)
  def _reduce_163(val, _values, result)
            result = Types::Bases::Void.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 698)
  def _reduce_164(val, _values, result)
            RBS.logger.warn "`any` type is deprecated. Use `untyped` instead. (#{val[0].location.to_s})"
        result = Types::Bases::Any.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 702)
  def _reduce_165(val, _values, result)
            result = Types::Bases::Any.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 705)
  def _reduce_166(val, _values, result)
            result = Types::Bases::Bool.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 708)
  def _reduce_167(val, _values, result)
            result = Types::Bases::Nil.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 711)
  def _reduce_168(val, _values, result)
            result = Types::Bases::Top.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 714)
  def _reduce_169(val, _values, result)
            result = Types::Bases::Bottom.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 717)
  def _reduce_170(val, _values, result)
            result = Types::Bases::Self.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 720)
  def _reduce_171(val, _values, result)
            result = Types::Optional.new(type: Types::Bases::Self.new(location: val[0].location),
                                     location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 724)
  def _reduce_172(val, _values, result)
            result = Types::Bases::Instance.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 727)
  def _reduce_173(val, _values, result)
            result = Types::Bases::Class.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 730)
  def _reduce_174(val, _values, result)
            result = Types::Literal.new(literal: true, location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 733)
  def _reduce_175(val, _values, result)
            result = Types::Literal.new(literal: false, location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 736)
  def _reduce_176(val, _values, result)
            result = Types::Literal.new(literal: val[0].value, location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 739)
  def _reduce_177(val, _values, result)
            result = Types::Literal.new(literal: val[0].value, location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 742)
  def _reduce_178(val, _values, result)
            result = Types::Literal.new(literal: val[0].value, location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 745)
  def _reduce_179(val, _values, result)
            name = val[0].value
        args = []
        location = val[0].location

        case
        when name.class?
          if is_bound_variable?(name.name)
            result = Types::Variable.new(name: name.name, location: location)
          else
            result = Types::ClassInstance.new(name: name, args: args, location: location)
          end
        when name.alias?
          result = Types::Alias.new(name: name, location: location)
        when name.interface?
          result = Types::Interface.new(name: name, args: args, location: location)
        end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 763)
  def _reduce_180(val, _values, result)
            name = val[0].value
        args = val[2]
        location = val[0].location + val[3].location

        case
        when name.class?
          if is_bound_variable?(name.name)
            raise SemanticsError.new("#{name.name} is type variable and cannot be applied", subject: name, location: location)
          end
          result = Types::ClassInstance.new(name: name, args: args, location: location)
        when name.interface?
          result = Types::Interface.new(name: name, args: args, location: location)
        else
          raise SyntaxError.new(token_str: "kLBRACKET", error_value: val[1])
        end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 780)
  def _reduce_181(val, _values, result)
            location = val[0].location + val[1].location
        result = Types::Tuple.new(types: [], location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 784)
  def _reduce_182(val, _values, result)
            location = val[0].location + val[2].location
        types = val[1]
        result = Types::Tuple.new(types: types, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 789)
  def _reduce_183(val, _values, result)
            type = val[1].dup
        type.instance_eval do
          @location = val[0].location + val[2].location
        end
        result = type

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 796)
  def _reduce_184(val, _values, result)
            result = Types::ClassSingleton.new(name: val[2].value,
                                           location: val[0].location + val[3].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 800)
  def _reduce_185(val, _values, result)
            result = Types::Proc.new(type: val[1].value, location: val[0].location + val[1].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 803)
  def _reduce_186(val, _values, result)
            result = Types::Optional.new(type: val[0], location: val[0].location + val[1].location)

    result
  end
.,.,

# reduce 187 omitted

module_eval(<<'.,.,', 'parser.y', 809)
  def _reduce_188(val, _values, result)
            result = [val[0]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 812)
  def _reduce_189(val, _values, result)
            result = val[0] + [val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 817)
  def _reduce_190(val, _values, result)
            result = Types::Record.new(
          fields: val[1],
          location: val[0].location + val[2].location
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 825)
  def _reduce_191(val, _values, result)
            result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 828)
  def _reduce_192(val, _values, result)
            result = val[0].merge!(val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 833)
  def _reduce_193(val, _values, result)
            result = { val[0].value => val[2] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 836)
  def _reduce_194(val, _values, result)
            result = { val[0].value => val[2] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 839)
  def _reduce_195(val, _values, result)
            result = { val[0].value => val[2] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 842)
  def _reduce_196(val, _values, result)
            result = { val[0].value => val[1] }

    result
  end
.,.,

# reduce 197 omitted

module_eval(<<'.,.,', 'parser.y', 848)
  def _reduce_198(val, _values, result)
            result = val[0]

    result
  end
.,.,

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

module_eval(<<'.,.,', 'parser.y', 855)
  def _reduce_203(val, _values, result)
            location = val[0].location + val[4].location
        type = Types::Function.new(
          required_positionals: val[1][0],
          optional_positionals: val[1][1],
          rest_positionals: val[1][2],
          trailing_positionals: val[1][3],
          required_keywords: val[1][4],
          optional_keywords: val[1][5],
          rest_keywords: val[1][6],
          return_type: val[4],
        )

        result = LocatedValue.new(value: type, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 870)
  def _reduce_204(val, _values, result)
            location = val[0].location + val[1].location
        type = Types::Function.new(
          required_positionals: [],
          optional_positionals: [],
          rest_positionals: nil,
          trailing_positionals: [],
          required_keywords: {},
          optional_keywords: {},
          rest_keywords: nil,
          return_type: val[1]
        )

        result = LocatedValue.new(value: type, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 887)
  def _reduce_205(val, _values, result)
            result = val[2]
        result[0].unshift(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 891)
  def _reduce_206(val, _values, result)
            result = empty_params_result
        result[0].unshift(val[0])

    result
  end
.,.,

# reduce 207 omitted

module_eval(<<'.,.,', 'parser.y', 898)
  def _reduce_208(val, _values, result)
            result = val[2]
        result[1].unshift(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 902)
  def _reduce_209(val, _values, result)
            result = empty_params_result
        result[1].unshift(val[0])

    result
  end
.,.,

# reduce 210 omitted

module_eval(<<'.,.,', 'parser.y', 909)
  def _reduce_211(val, _values, result)
            result = val[2]
        result[2] = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 913)
  def _reduce_212(val, _values, result)
            result = empty_params_result
        result[2] = val[0]

    result
  end
.,.,

# reduce 213 omitted

module_eval(<<'.,.,', 'parser.y', 920)
  def _reduce_214(val, _values, result)
            result = val[2]
        result[3].unshift(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 924)
  def _reduce_215(val, _values, result)
            result = empty_params_result
        result[3].unshift(val[0])

    result
  end
.,.,

# reduce 216 omitted

module_eval(<<'.,.,', 'parser.y', 931)
  def _reduce_217(val, _values, result)
            result = empty_params_result

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 934)
  def _reduce_218(val, _values, result)
            result = val[2]
        result[4].merge!(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 938)
  def _reduce_219(val, _values, result)
            result = empty_params_result
        result[4].merge!(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 942)
  def _reduce_220(val, _values, result)
            result = val[2]
        result[5].merge!(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 946)
  def _reduce_221(val, _values, result)
            result = empty_params_result
        result[5].merge!(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 950)
  def _reduce_222(val, _values, result)
            result = empty_params_result
        result[6] = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 956)
  def _reduce_223(val, _values, result)
            result = Types::Function::Param.new(type: val[0],
                                            name: val[1]&.value&.to_sym)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 962)
  def _reduce_224(val, _values, result)
            result = Types::Function::Param.new(type: val[1],
                                            name: val[2]&.value&.to_sym)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 968)
  def _reduce_225(val, _values, result)
            result = Types::Function::Param.new(type: val[1],
                                            name: val[2]&.value&.to_sym)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 974)
  def _reduce_226(val, _values, result)
            param = Types::Function::Param.new(type: val[1],
                                           name: val[2]&.value&.to_sym)
        result = { val[0].value => param }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 981)
  def _reduce_227(val, _values, result)
            param = Types::Function::Param.new(type: val[2],
                                           name: val[3]&.value&.to_sym)
        result = { val[1].value => param }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 988)
  def _reduce_228(val, _values, result)
            result = Types::Function::Param.new(type: val[1],
                                            name: val[2]&.value&.to_sym)

    result
  end
.,.,

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

module_eval(<<'.,.,', 'parser.y', 997)
  def _reduce_233(val, _values, result)
            namespace = val[0]&.value || Namespace.empty
        name = val[1].value.to_sym
        type_name = TypeName.new(namespace: namespace, name: name)
        location = (loc0 = val[0]&.location) ? loc0 + val[1].location : val[1].location
        result = LocatedValue.new(value: type_name, location: location)

    result
  end
.,.,

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

module_eval(<<'.,.,', 'parser.y', 1009)
  def _reduce_237(val, _values, result)
            namespace = val[0]&.value || Namespace.empty
        name = val[1].value.to_sym
        type_name = TypeName.new(namespace: namespace, name: name)
        location = (loc0 = val[0]&.location) ? loc0 + val[1].location : val[1].location
        result = LocatedValue.new(value: type_name, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1018)
  def _reduce_238(val, _values, result)
            namespace = val[0]&.value || Namespace.empty
        name = val[1].value.to_sym
        type_name = TypeName.new(namespace: namespace, name: name)
        location = (loc0 = val[0]&.location) ? loc0 + val[1].location : val[1].location
        result = LocatedValue.new(value: type_name, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1027)
  def _reduce_239(val, _values, result)
            result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1030)
  def _reduce_240(val, _values, result)
            result = LocatedValue.new(value: Namespace.root, location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1033)
  def _reduce_241(val, _values, result)
            namespace = Namespace.parse(val[1].value).absolute!
        result = LocatedValue.new(value: namespace, location: val[0].location + val[1].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1037)
  def _reduce_242(val, _values, result)
            namespace = Namespace.parse(val[0].value)
        result = LocatedValue.new(value: namespace, location: val[0].location)

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module RBS


