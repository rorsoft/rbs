module RBS
  module Collection
    # This class represent the configration file.
    class Config
      class LockfileGenerator
        attr_reader config: Config
        attr_reader lock: Config?
        attr_reader lock_path: Pathname
        attr_reader gemfile_lock: Bundler::LockfileParser

        def self.generate: (config_path: Pathname, gemfile_lock_path: Pathname, ?with_lockfile: boolish) -> Config

        def initialize: (config_path: Pathname, gemfile_lock_path: Pathname, with_lockfile: boolish) -> void

        def generate: () -> Config

        private

        def assign_gem: (gem_name: String, version: String?) -> void

        def gemfile_lock_gems: () { (untyped) -> void } -> void

        def remove_ignored_gems!: () -> void

        def find_collection: (gem_name: String) -> untyped

        def find_best_version: (version: String?, versions: Array[String]) -> Gem::Version
      end

      PATH: Pathname

      type gem_entry = {
        'name' => String,
        'version' => String?,
        'ignore' => boolish,
        'collection' => Collections::collection_entry?
      }

      def self.generate_lockfile: (config_path: Pathname, gemfile_lock_path: Pathname, ?with_lockfile: boolish) -> Config

      def self.from_path: (Pathname path) -> Config

      def self.lockfile_of: (Pathname config_path) -> Config?

      def self.to_lockfile_path: (Pathname config_path) -> Pathname

      def initialize: (untyped data) -> void

      def add_gem: (untyped gem) -> untyped

      def gem: (String gem_name) -> untyped

      def repo_path: () -> Pathname

      def collections: () -> Array[Collections::_Collection]

      def dump_to: (Pathname) -> void

      def gems: () -> Array[untyped]
    end
  end
end
