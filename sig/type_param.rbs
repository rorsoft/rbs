module RBS
  module AST
    class TypeParam
      # Key
      # ^^^ name
      #
      # unchecked out Elem < _ToJson
      # ^^^^^^^^^                    unchecked
      #           ^^^                variance
      #               ^^^^           name
      #                    ^^^^^^^^^ upper_bound
      type loc = Location[:name, :variance | :unchecked | :upper_bound]

      type variance = :invariant | :covariant | :contravariant

      type bound = Types::ClassInstance | Types::ClassSingleton | Types::Interface

      attr_reader name: Symbol
      attr_reader variance: variance
      attr_reader location: loc?

      attr_reader upper_bound: bound?

      def initialize: (name: Symbol, variance: variance, upper_bound: bound?, location: loc?) -> void

      include _ToJson

      def ==: (untyped) -> bool

      def eql?: (untyped) -> bool

      def hash: () -> Integer

      @unchecked: bool

      def unchecked!: (?boolish) -> self

      def unchecked?: () -> bool

      def rename: (Symbol) -> TypeParam

      def map_type: () { (bound) -> bound } -> TypeParam

      def self.resolve_variables: (Array[TypeParam]) -> void

      def self.subst_var: (Set[Symbol], Types::t) -> Types::t

      def to_s: () -> String
    end
  end
end
